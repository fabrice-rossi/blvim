[{"path":"https://fabrice-rossi.github.io/blvim/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://fabrice-rossi.github.io/blvim/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://fabrice-rossi.github.io/blvim/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://fabrice-rossi.github.io/blvim/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://fabrice-rossi.github.io/blvim/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://fabrice-rossi.github.io/blvim/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://fabrice-rossi.github.io/blvim/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://fabrice-rossi.github.io/blvim/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://fabrice-rossi.github.io/blvim/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://fabrice-rossi.github.io/blvim/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://fabrice-rossi.github.io/blvim/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://fabrice-rossi.github.io/blvim/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://fabrice-rossi.github.io/blvim/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://fabrice-rossi.github.io/blvim/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://fabrice-rossi.github.io/blvim/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://fabrice-rossi.github.io/blvim/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://fabrice-rossi.github.io/blvim/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://fabrice-rossi.github.io/blvim/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://fabrice-rossi.github.io/blvim/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://fabrice-rossi.github.io/blvim/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://fabrice-rossi.github.io/blvim/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://fabrice-rossi.github.io/blvim/articles/grid.html","id":"locations-and-setup","dir":"Articles","previous_headings":"","what":"Locations and setup","title":"Systematic exploration of the BLV solution space","text":"Let us work regular grid locations, symmetric (non-bipartite) case.  use Euclidean distance points interaction costs. finally, consider unitary productions initial attractivenesses.","code":"locations <- expand.grid(x = 1:5, y = 1:5) locations$name <- LETTERS[1:25] ggplot(locations, aes(x, y, label = name)) +   geom_text() +   coord_fixed() costs <- as.matrix(dist(locations[c(\"x\", \"y\")])) location_prod <- rep(1, nrow(locations)) location_att <- rep(1, nrow(locations))"},{"path":"https://fabrice-rossi.github.io/blvim/articles/grid.html","id":"computing-a-collection-of-models","dir":"Articles","previous_headings":"","what":"Computing a collection of models","title":"Systematic exploration of the BLV solution space","text":"main function systematic exploration grid_blvim(), computes collection spatial interaction models (BLV models obtained blvim()) pairwise combinations \\(\\alpha\\) \\(\\beta\\) provided. \\(\\alpha\\) parameter, generally recommended focus values strictly larger 1 (setting \\(\\alpha=1\\) significantly slows convergence fixed-point algorithm used BLV model). \\(\\beta\\), one wants cover local models (large \\(\\beta\\)) long-range ones (small \\(\\beta\\)). , distances positions range 1 approximately 7, typical range \\(\\frac{1}{\\beta}\\) \\([0.5 ; 4]\\). collection models computed grid_blvim() follows. Notice specify location data parameters call, generally simpler resulting sim_list(). specify now location data. important point note sim_list() returned grid_blvim() homogeneous: uses cost matrix location data. enforced package exploration methods proposed make sense heterogeneous collection spatial interaction models.","code":"models <- grid_blvim(costs,   location_prod,   alphas = seq(1.05, 2, length.out = 25),   betas = 1 / seq(0.5, 4, length.out = 25),   location_att,   bipartite = FALSE,   epsilon = 0.1,   iter_max = 5000,   conv_check = 10 ) destination_names(models) <- locations$name destination_positions(models) <- as.matrix(locations[c(\"x\", \"y\")])"},{"path":[]},{"path":"https://fabrice-rossi.github.io/blvim/articles/grid.html","id":"single-model-extraction","dir":"Articles","previous_headings":"Exploring the results","what":"Single model extraction","title":"Systematic exploration of the BLV solution space","text":"sim_list() object behaves like read-list. can therefore extract models, instance display corresponding flows, shown first model, using standard matrix display position-based one.","code":"autoplot(models[[1]]) +   scale_fill_gradient(low = \"white\", high = \"black\") +   coord_fixed() autoplot(models[[10]],   flows = \"full\", with_positions = TRUE,   arrow = arrow(length = unit(0.01, \"npc\")) ) +   coord_fixed() +   scale_linewidth_continuous(range = c(0, 1))"},{"path":"https://fabrice-rossi.github.io/blvim/articles/grid.html","id":"variability-plot","dir":"Articles","previous_headings":"Exploring the results","what":"Variability plot","title":"Systematic exploration of the BLV solution space","text":"sim_list object ggplot2::autoplot() function provides variability plot. goal show statistics flows collection spatial interaction models list. default representation focuses individual flows shown .  instance, M column shows flows received locations location M (centre point locations). thick squares correspond median flow received M models. figure shows particular many locations receive incoming flow model. position-based figure shows destination flows, using circles display statistics flows.  figure confirms external locations receive flow. median flow received M, central location, significantly larger flows. internal tiny circle location shows 0.05 quartile: indicates models list, central location receive flow. illustrated first model list figure .","code":"autoplot(models, with_names = TRUE) +   theme_light() autoplot(models, flows = \"destination\", with_positions = TRUE) +   scale_size_continuous(range = c(0, 7)) +   coord_fixed()"},{"path":"https://fabrice-rossi.github.io/blvim/articles/grid.html","id":"statistics-oriented-display","dir":"Articles","previous_headings":"Exploring the results","what":"Statistics-oriented display","title":"Systematic exploration of the BLV solution space","text":"addition variability flows, can display numerical value spatial interaction model single plot. facilitate display, collection models first integrated data frame-like model. done sim_df() function. result data frame special sim column contains original sim_list() object well parameters used build model (\\(\\alpha\\) \\(\\beta\\)), diagnostics blvim() runs, Shannon diversity() models. sim_df() object ggplot2::autoplot() function shows default diversities models.  figure shows, combination parameters \\(\\alpha\\) \\(\\beta\\), coloured rectangle represents chosen numerical value corresponding model. One can display column sim_df object, instance convergence status.  autoplot.sim_df() function uses tidy evaluation, enables user compute interesting values fly, following figure displays number terminals per model, according Nystuen Dacey definition.","code":"models_df <- sim_df(models) knitr::kable(head(models_df)) autoplot(models_df) +   scale_fill_viridis_c() autoplot(models_df, converged) autoplot(models_df, diversity(sim, \"ND\")) +   scale_fill_viridis_c()"},{"path":[]},{"path":"https://fabrice-rossi.github.io/blvim/articles/grid.html","id":"clustering-the-models","dir":"Articles","previous_headings":"Organizing the results","what":"Clustering the models","title":"Systematic exploration of the BLV solution space","text":"set models, structured, can difficult understand completely using tools presented . push analysis , may useful cluster models display representative elements clusters. ease task, support distance-based approaches (hierarchical clustering partitioning around medoids) via sim_distance(). instance, following call computes pairwise Euclidean distances destination flows models sim_list(). can used input hierarchical clustering. studied example, structure model set particular large subset model, flow sent central location. Part clearly visible dendrogram clustering, large cluster left.  use clustering explore result set, can set number clusters arbitrary value: looking clustering structure rather want summarise model set. small number clusters generally provide crude summary large number difficult analyse. , chose arbitrarily 16 clusters. best way integrate clustering result analysis add new column sim_df() giving class membership, follows instance: can immediately used standard sim_df() visualisation.","code":"models_dist <- sim_distance(models, \"destination\") models_hc <- hclust(models_dist, method = \"ward.D2\") plot(models_hc, hang = -1, labels = FALSE) models_df$cluster <- as.factor(cutree(models_hc, k = 16)) autoplot(models_df, cluster)"},{"path":"https://fabrice-rossi.github.io/blvim/articles/grid.html","id":"showing-cluster-variability","dir":"Articles","previous_headings":"Organizing the results","what":"Showing cluster variability","title":"Systematic exploration of the BLV solution space","text":"Two functions available blvim leverage partition collection spatial interaction models. use ggplot2::facet_wrap() combine standard individual visualisations organised one. first function, grid_var_autoplot(), shows variability representation groups identified partitioning variable sim_df() object. Using clustering obtained , simply write:  gives flow variation panel 16 clusters. Based redundancy display, can guess asked many clusters, apart , representation outlines collection distinct model classes: model central domination (clusters 13 16) models dominant diagonal (mostly self-interaction, clusters 1 3) models central location receive flow (clusters 4 9) complex patterns clusters 5 8, 10 12 Using location positions, can gain insight different behaviours, provided focus destination flows.  fact see one circle per position illustrates quality clusters (also case previous visualisation, less clearly). Indeed, means destination flows almost constant cluster models. Moreover, representation, blind actual pairwise flows, shows structure clusters. particular, emphasises small differences cluster 13 clusters 14 16 (similarly e.g. clusters 10 11).","code":"grid_var_autoplot(models_df, cluster) grid_var_autoplot(models_df, cluster, flows = \"destination\", with_positions = TRUE) +   scale_size_continuous(range = c(0, 4)) +   coord_fixed()"},{"path":"https://fabrice-rossi.github.io/blvim/articles/grid.html","id":"finding-representative-models","dir":"Articles","previous_headings":"Organizing the results","what":"Finding representative models","title":"Systematic exploration of the BLV solution space","text":"addition variability plots, one may want extract representative examples cluster. median.sim_list() function provides solution based concept generalised median (also called medoid): function returns, collection spatial interaction models sim_list(), one average closest models. distance used one distances provided grid_distance(). recommended use distance clustering, enforced function (applies sim_list()). practice, use tapply() compute list medoids, build sim_list() sim_df(). small collection models can displayed exhaustively, using grid_autoplot(). function uses ggplot2::facet_wrap() show standard spatial interaction model graphical representation (ones provided autoplot.sim()) models sim_df. instance, one can get flows medoids follows.  function supports individual representations, instance flows positions.  Destination flows positions also supported.  example, structure result collection quite simple already captured large extent variability plots. complex situations, series graphics complementary give better insight solution space. example, structure result collection quite simple already captured large extent variability plots. complex situations, series graphics complementary give better insight solution space.","code":"models_center <- sim_list(tapply(models, models_df$cluster,   median,   flows = \"destination\" )) models_center_df <- sim_df(models_center) grid_autoplot(models_center_df) +   scale_fill_gradient(low = \"white\", high = \"black\") +   coord_fixed() grid_autoplot(models_center_df,   flows = \"full\", with_positions = TRUE,   arrow = arrow(length = unit(0.015, \"npc\")) ) +   scale_linewidth_continuous(range = c(0, 0.5)) +   coord_fixed() grid_autoplot(models_center_df, flows = \"destination\", with_positions = TRUE) +   scale_size_continuous(range = c(0, 6)) +   coord_fixed()"},{"path":[]},{"path":"https://fabrice-rossi.github.io/blvim/articles/grid.html","id":"european-cities","dir":"Articles","previous_headings":"Real-world example","what":"European cities","title":"Systematic exploration of the BLV solution space","text":"Let us analyse eurodist dataset, consists road distances 21 cities Europe. use approximate coordinates cities obtained OpenStreetMap. gives us following map.","code":"data(\"eurodist\") eurodist_names <- labels(eurodist) eurodist_names[match(\"Lyons\", eurodist_names)] <- \"Lyon\" eurodist_names[match(\"Marseilles\", eurodist_names)] <- \"Marseille\" eurodist_mat <- as.matrix(eurodist) colnames(eurodist_mat) <- eurodist_names rownames(eurodist_mat) <- eurodist_names eurodist_coord <- data.frame(   longitude = c(     23.7337556, 2.14541, 4.3386684, 1.8110332, -1.5839619,     6.94851185, 12.56571, 6.12186775, -5.3482947, 10.1185387,     4.1148457, -9.1655069, 4.83042935, -3.7034351, 5.3805535,     8.90758575, 11.6032322, 2.3222823, 12.5451136, 18.0710935,     16.37833545   ),   latitude = c(     37.9726176, 41.31120535, 50.89415265, 50.9338734, 49.6456093,     50.84446155, 55.67613, 46.20823855, 36.1113418, 53.57845325,     51.96912755, 38.7076287, 45.7591956, 40.47785335, 43.28032785,     45.48039615, 48.1235428, 48.8787706, 41.8983351, 59.3251172,     48.1653537   ),   name = eurodist_names ) ggplot(eurodist_coord, aes(longitude, latitude, label = name)) +   geom_point() +   ggrepel::geom_label_repel() +   coord_sf(default_crs = sf::st_crs(4326))"},{"path":"https://fabrice-rossi.github.io/blvim/articles/grid.html","id":"models","dir":"Articles","previous_headings":"Real-world example","what":"Models","title":"Systematic exploration of the BLV solution space","text":"fit collection SIMs wide range values parameters. parameter pairs lead relatively fast convergence, except values. full range diversity possible 21 cities covered parameter space, indicates extension parameter range probably uncover SIMs differ significantly obtained chosen range.","code":"euro_models <- grid_blvim(eurodist_mat,   rep(1, 21),   alphas = seq(1.05, 1.75, length.out = 30),   betas = 1 / seq(50, 750, length.out = 30),   rep(1, 21),   bipartite = FALSE,   epsilon = 0.05,   iter_max = 40000,   conv_check = 50 ) destination_positions(euro_models) <- as.matrix(eurodist_coord[1:2]) euro_models_df <- sim_df(euro_models) autoplot(euro_models_df, iterations) +   scale_fill_viridis_c() autoplot(euro_models_df, diversity) +   scale_fill_viridis_c()"},{"path":"https://fabrice-rossi.github.io/blvim/articles/grid.html","id":"variability-plot-1","dir":"Articles","previous_headings":"Real-world example","what":"Variability plot","title":"Systematic exploration of the BLV solution space","text":"flow variability plot outlines cities potentially dominant. Lyon strongest. explained central position map. expect find single dominant city many configurations. Hook Holland Brussels also appear, lesser extent. Gibraltar also potentially active configurations. Athens Stockholm frequently sole receivers flow, probably owing isolated positions. Destination flows tell story. Notably, cities null median incoming flow, apart Athens, Gibraltar, Lyon Stockholm. addition, cities 0.95 quantile 1, corresponds local configurations, situations \\(\\beta\\) large enough prevent external flow. Brussels Hook Holland stand (addition four cities mentioned ).","code":"autoplot(euro_models, with_names = TRUE) +   theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1)) autoplot(euro_models, flows = \"destination\", with_names = TRUE) +   coord_flip() autoplot(euro_models,   flows = \"destination\", with_positions = TRUE,   with_names = TRUE ) +   scale_size_continuous(range = c(0, 6)) +   coord_sf(default_crs = sf::st_crs(4326))"},{"path":"https://fabrice-rossi.github.io/blvim/articles/grid.html","id":"clustering","dir":"Articles","previous_headings":"Real-world example","what":"Clustering","title":"Systematic exploration of the BLV solution space","text":"apply clustering strategy artificial data: 16 clusters obtained hierarchical clustering using Ward criterion. dendrogram clearly shows three main clusters, explained , role clustering allow exploration result spaces rather find actual clusters.  clusters well organised parameter set.  variability plot shows mostly isolated circles inner outer ring. means clusters relatively homogeneous terms destination flows, thus median flows give good idea typical behaviours.  behaviours visible destination flow level () flow level (): Clusters 1 3 correspond situations flows local (hence importance diagonal flow), progressive shift towards sending flow Lyon. Brussels also important clusters 2 3. Clusters 4, 6 7 maintain relatively strong diagonal (self) flow flows sent Lyon transition Brussels Hook Holland Clusters 5, 8 9 intermediate situations cities play role local attractors, e.g., Rome Vienna, concentration external cities Lyon Brussels (5 8) Hook Holland (9) progressing. Clusters 10 12 situations Lyon Hook Holland share incoming flows, (10) fewer (12) flows reaching external cities Stockholm, Athens trio Gibraltar, Lisbon Madrid. Clusters 13 15 show Lyon dominating city, cluster 16, Lyon shares incoming flow Hook Holland.","code":"euro_models_dist <- sim_distance(euro_models, \"destination\") euro_models_hc <- hclust(euro_models_dist, method = \"ward.D2\") plot(euro_models_hc, hang = -1, labels = FALSE) euro_models_df$cluster <- as.factor(cutree(euro_models_hc, k = 16)) autoplot(euro_models_df, cluster) +   theme(legend.position = \"bottom\") +   guides(fill = guide_legend(nrow = 2)) grid_var_autoplot(euro_models_df, cluster,   flows = \"destination\",   with_positions = TRUE ) +   scale_size_continuous(range = c(0, 6)) +   coord_sf(default_crs = sf::st_crs(4326)) grid_var_autoplot(euro_models_df, cluster)"},{"path":"https://fabrice-rossi.github.io/blvim/articles/grid.html","id":"medoids","dir":"Articles","previous_headings":"Real-world example","what":"Medoids","title":"Systematic exploration of the BLV solution space","text":"Finally, look medoids. medoids confirm analysis given .    analysis, one can focus particular medoid, instance cluster 1:  cluster 5:  Finally, one can randomly select subset models cluster use grid_autoplot() display models . offers way visually assess variability within cluster. instance, figure cluster 4, models similar, differences exist, flows Hamburg Copenhagen, whose level varies across configurations (compare 6 7, instance).","code":"euro_models_center <- sim_list(tapply(euro_models, euro_models_df$cluster,   median,   flows = \"destination\" )) euro_models_center_df <- sim_df(euro_models_center) grid_autoplot(euro_models_center_df) +   scale_fill_gradient(low = \"white\", high = \"black\") +   coord_fixed() grid_autoplot(euro_models_center_df,   flows = \"destination\",   with_positions = TRUE ) +   scale_size_continuous(range = c(0, 6)) +   coord_sf(default_crs = sf::st_crs(4326)) grid_autoplot(euro_models_center_df,   with_positions = TRUE, arrow = arrow(length = unit(0.015, \"npc\")) ) +   scale_linewidth_continuous(range = c(0, 0.75)) +   coord_sf(default_crs = sf::st_crs(4326)) autoplot(euro_models_center[[1]],   flows = \"full\", with_positions = TRUE,   arrow = arrow(length = unit(0.015, \"npc\")) ) +   scale_linewidth_continuous(range = c(0, 2)) +   coord_sf(default_crs = sf::st_crs(4326)) autoplot(euro_models_center[[5]],   flows = \"full\", with_positions = TRUE,   arrow = arrow(length = unit(0.015, \"npc\")) ) +   scale_linewidth_continuous(range = c(0, 2)) +   coord_sf(default_crs = sf::st_crs(4326)) set.seed(0) euro_models_idx <- sample(which(euro_models_df$cluster == 4), 16) euro_models_cl4_sample <- euro_models[euro_models_idx] euro_models_cl4_sample_df <- sim_df(euro_models_cl4_sample) grid_autoplot(euro_models_cl4_sample_df, with_positions = TRUE) +   scale_linewidth_continuous(range = c(0, 1)) +   coord_sf(default_crs = sf::st_crs(4326))"},{"path":[]},{"path":"https://fabrice-rossi.github.io/blvim/articles/theory.html","id":"spatial-interaction-models","dir":"Articles","previous_headings":"Static Models","what":"Spatial Interaction Models","title":"Theoretical Background","text":"Spatial interaction models aim estimate flows locations, instance, workers commuting residential zones employment zones. Models built : collection \\(n\\) origin locations described characteristics \\((X_i)_{1\\leq \\leq n}\\) collection \\(p\\) destination locations described characteristics \\((Z_j)_{1\\leq j\\leq p}\\) collection \\(n\\times p\\) characteristics difficulty travelling (broad sense) origin \\(\\) destination \\(j\\), \\(c_{ij}\\) goal estimate flows \\((Y_{ij})_{1\\leq \\leq n, 1\\leq j\\leq p}\\) origin locations destination locations. typical hypothesis flows depend characteristics follows: \\[ Y_{ij}=f(X_i, Z_j, c_{ij}), \\] well-chosen function \\(f\\). well-known spatial interaction model -called gravity model, takes form: \\[ Y_{ij}\\propto \\frac{X_iZ_j}{c_{ij}^2}, \\] \\(\\propto\\) means proportional , \\(c_{ij}\\) supposed distance origin \\(\\) destination \\(j\\), characteristics \\(X_i\\) \\(Z_j\\) assumed numerical.","code":""},{"path":"https://fabrice-rossi.github.io/blvim/articles/theory.html","id":"constraints","dir":"Articles","previous_headings":"Static Models","what":"Constraints","title":"Theoretical Background","text":"Spatial interaction models can instantiated different constraints: production: \\((X_i)\\) interpreted production values. model production-constrained \\(\\sum_{j=1}^pY_{ij}=X_i\\) \\(\\); capacity: \\((Z_j)\\) interpreted destination capacities. model capacity-constrained \\(\\sum_{=1}^pY_{ij}=Z_j\\) \\(j\\); : doubly-constrained models production- capacity-constrained. One common models used practice doubly-constrained gravity model.","code":""},{"path":"https://fabrice-rossi.github.io/blvim/articles/theory.html","id":"maximum-entropy-models","dir":"Articles","previous_headings":"Static Models","what":"Maximum Entropy Models","title":"Theoretical Background","text":"late 1960s, Alan Wilson developed collection spatial interaction models based maximum entropy principle. models, flow given : \\[ Y_{ij} \\propto X_iZ_j^{\\alpha}\\exp(-\\beta c_{ij}), \\] \\(\\alpha\\) \\(\\beta\\) two parameters interpreted follows: \\(\\alpha\\) return scale parameter: \\(Z_j\\) grows \\(1\\), actual attractiveness can increase super-linear way (\\(\\alpha>1\\)) sub-linear way (\\(\\alpha<1\\)); \\(\\beta\\) acts inverse scale costs \\(c_{ij}\\). osts distances, instance, \\(\\frac{1}{\\beta}\\) can seen cut-distance. spatial interaction models, maximum entropy models constrained. blvim, focus production-constrained models thus : \\[ Y_{ij} = \\frac{X_iZ_j^{\\alpha}\\exp(-\\beta c_{ij})}{\\sum_{k=1}^pZ_k^{\\alpha}\\exp(-\\beta c_{ik})}, \\] ensures: \\[ \\forall ,\\ \\sum_{j=1}^pY_{ij}=X_i. \\] model implemented blvim static_blvim() function.","code":""},{"path":"https://fabrice-rossi.github.io/blvim/articles/theory.html","id":"dynamic-models","dir":"Articles","previous_headings":"","what":"Dynamic Models","title":"Theoretical Background","text":"models described static: correspond frozen view exchanges retroaction flow received one destination location attractiveness, instance. 1970s, Harris Wilson developed dynamic models assume form etroaction, initially terms equilibrium state.","code":""},{"path":"https://fabrice-rossi.github.io/blvim/articles/theory.html","id":"harris-and-wilson-equilibrium-values","dir":"Articles","previous_headings":"Dynamic Models","what":"Harris and Wilson Equilibrium Values","title":"Theoretical Background","text":"main idea Harris (1964) interpret incoming flows revenues, capacity/attractiveness destination location adapted revenues (production-constrained models). Essentially, written : \\[ \\forall j,\\ Z_j=\\kappa D_j, \\] \\(\\kappa\\) conversion factor capacity revenues, \\(D_j\\) total flow incoming \\(Z_j\\), .e.: \\[ \\forall j,\\  D_j=\\sum_{=1}^nY_{ij}. \\] Applied maximum entropy production-constrained model, leads spatial interaction model defined implicitly follows. assume given production constraints \\((X_i)_{1\\leq \\leq n}\\) cost matrix \\((c_{ij})_{1\\leq \\leq n, 1\\leq j\\leq p}\\), attractiveness \\((Z_j)_{1\\leq j\\leq p}\\) solution following collection fixed-point equations: \\[ \\forall j,\\  Z_j=\\kappa\\sum_{=1}^n\\left(\\frac{X_iZ_j^{\\alpha}\\exp(-\\beta c_{ij})}{\\sum_{k=1}^pZ_k^{\\alpha}\\exp(-\\beta c_{ik})}\\right), \\] \\(\\alpha\\), \\(\\beta\\), \\(\\kappa\\) fixed parameters. \\((Z_j)_{1\\leq j\\leq p}\\), flows computed using standard production-constrained maximum entropy model.","code":""},{"path":"https://fabrice-rossi.github.io/blvim/articles/theory.html","id":"a-dynamic-model-the-boltzmannlotkavolterra-model","dir":"Articles","previous_headings":"Dynamic Models","what":"A Dynamic Model: The Boltzmann–Lotka–Volterra Model","title":"Theoretical Background","text":"collection fixed-point equations can solved using different techniques, instance, Newton’s method. simplest solution probably perform fixed-point iterations, discussed Harris & Wilson (1978). start initial values \\(Z\\)s, denoted \\((Z^{0}_j)_{1\\leq j\\leq p}\\), iterate: \\[ \\forall j,\\ Z_j^{t+1} := \\kappa\\sum_{=1}^n\\left(\\frac{X_i{(Z^{t}_j)}^{\\alpha}\\exp(-\\beta c_{ij})}{\\sum_{k=1}^p{(Z^{t}_k)}^{\\alpha}\\exp(-\\beta c_{ik})}\\right), \\] convergence. iterative scheme can also interpreted dynamic model attractiveness location updated match incoming flow. update instantaneous, thus update parameter introduced, \\(\\epsilon\\). start initial values \\(Z\\)s iterate: \\[ \\begin{align*} \\forall j,\\ D_j^{t} &:= \\sum_{=1}^n\\left(\\frac{X_i{(Z^{t}_j)}^{\\alpha}\\exp(-\\beta c_{ij})}{\\sum_{k=1}^p{(Z^{t}_k)}^{\\alpha}\\exp(-\\beta c_{ik})}\\right),\\\\ \\forall j,\\ Z_j^{t+1} &:= Z_j^t +\\epsilon(\\kappa D^{t}_j-Z^{t}_j). \\end{align*} \\] Using \\(\\epsilon<1\\), typically small value \\(0.01\\), gives full trajectory \\(Z\\)s added value preventing oscillation behaviour. variant dynamic model proposed Wilson 2008, replacing second update quadratic version: \\[ \\forall j,\\ Z_j^{t+1} := Z_j^t +\\epsilon(\\kappa D^{t}_j-Z^{t}_j)Z^{t}_j. \\] solutions implemented blvim().","code":""},{"path":"https://fabrice-rossi.github.io/blvim/articles/theory.html","id":"diversity","dir":"Articles","previous_headings":"Dynamic Models","what":"Diversity","title":"Theoretical Background","text":"typical behaviour equilibrium solutions concentration attractiveness subset destination locations. can measured diversity() function. uses notion diversity outlined , example, Jost (2006). main idea notion, rephrased context locations, find \\(Z\\)s equivalent number locations, say \\(m\\), attractiveness evenly spread (, proportional \\(\\frac{1}{m}\\)). normalise \\((Z_j)_{1\\leq j\\leq p}\\) sum 1, get probability distribution \\(\\mathcal{P}=(p_j)_{1\\leq j\\leq p}\\) \\(\\{1, \\ldots, p\\}\\). One way interpret notion diversity measure “random” \\(\\mathcal{P}\\) . Indeed, concentrated 1, instance, \\(p_1\\simeq 1\\), samples generated ..d. manner \\(\\mathcal{P}\\) diverse, mostly consist value 1. entropy rather natural diversity index. instance, Shannon entropy \\(H(\\mathcal{P})=-\\sum_{j}p_j\\log p_j\\) provides good diversity index. Based principle outlined , diversity \\(\\mathcal{P}\\) number \\(m\\) diversity index \\(\\mathcal{P}\\) equal diversity index uniform distribution \\(\\{1, \\ldots, m\\}\\). can shown Shannon entropy, diversity \\(\\mathcal{P}\\) \\(\\exp(H(\\mathcal{P}))\\). holds also Rényi entropies. Notice diversity() diversities computed according incoming flows, .e., using \\((Z_j)_{1\\leq j\\leq p}\\) rather \\(D_j\\) defined \\[ \\forall j,\\  D_j=\\sum_{=1}^nY_{ij}. \\]","code":""},{"path":"https://fabrice-rossi.github.io/blvim/articles/theory.html","id":"self-exchange-configurations","dir":"Articles","previous_headings":"","what":"Self-Exchange Configurations","title":"Theoretical Background","text":"general case, exchanges spatial interaction models follow bipartite scheme: production locations send productions destination locations. locations two distinct sets. non-bipartite case production destination locations identical. change anything definition models (static dynamic), new tools can defined specifically particular case.","code":""},{"path":"https://fabrice-rossi.github.io/blvim/articles/theory.html","id":"location-domination-and-terminals","dir":"Articles","previous_headings":"Self-Exchange Configurations","what":"Location Domination and Terminals","title":"Theoretical Background","text":"tools based notions proposed J. D. Nystuen M. F. Dacey (1961). location production destination location, one can compare outgoing flows incoming ones. particular, Nystuen Dacey focus maximum output flow total incoming flow (\\((D_j)_{1\\leq j\\leq p}\\)). precisely, define importance location \\(j\\) \\(D_j\\) introduce notion domination: location \\(k\\) dominated importance smaller importance location sending largest flow. equation: \\[ D_k < D_{\\arg\\max_{j} Y_{kj}}. \\] terminal location dominated. Rihll Wilson (1991) propose relaxed version terminal location receives total incoming flow larger individual outgoing flows. Thus, location \\(k\\) dominated according definition : \\[ D_k < \\max_{j}Y_{kj}. \\] easy see terminal Nystuen Dacey definition also terminal Rihll Wilson, reverse false. functions terminals() is_terminal() compute terminals according either definition. addition, number terminals can seen diversity measure thus included definitions supported diversity().","code":""},{"path":"https://fabrice-rossi.github.io/blvim/articles/theory.html","id":"domination-graphs","dir":"Articles","previous_headings":"Self-Exchange Configurations","what":"Domination Graphs","title":"Theoretical Background","text":"addition extracting terminals non-bipartite model, Nystuen Dacey propose analyse -called nodal structure flows. consists nodal flows, .e. links non-terminal location location sending largest flow. defines graph locations sparse (\\(p-t\\) edges, \\(p\\) number locations \\(t\\) number terminals). function nd_graph() computes graph according terminal definitions.","code":""},{"path":"https://fabrice-rossi.github.io/blvim/articles/theory.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"Theoretical Background","text":"Harris, B. (1964). “model locational equilibrium retail trade”, Penn-Jersey Transportation Study, Philadelphia, Pennsylvania (mimeo). Harris, B., & Wilson, . G. (1978). “Equilibrium Values Dynamics Attractiveness Terms Production-Constrained Spatial-Interaction Models”, Environment Planning : Economy Space, 10(4), 371-388. https://dx.doi.org/10.1068/a100371 Jost, L. (2006), “Entropy diversity”, Oikos, 113: 363-375. https://dx.doi.org/10.1111/j.2006.0030-1299.14714.x Nystuen, J.D. Dacey, M.F. (1961), “graph theory interpretation nodal regions”, Papers Proceedings Regional Science Association 7: 29–42. https://dx.doi.org/10.1007/bf01969070 Rihll, T., Wilson, . (1991), “Modelling settlement structures ancient Greece: new approaches polis”, City Country Ancient World, Vol. 3, Edited J. Rich . Wallace-Hadrill, 58–95. London: Routledge. Wilson, . (2008), “Boltzmann, Lotka Volterra spatial structural evolution: integrated methodology dynamical systems”, J. R. Soc. Interface.5865–871 https://dx.doi.org/10.1098/rsif.2007.1288","code":""},{"path":"https://fabrice-rossi.github.io/blvim/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Fabrice Rossi. Author, maintainer.","code":""},{"path":"https://fabrice-rossi.github.io/blvim/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Rossi F (2025). blvim: Boltzmann–Lotka–Volterra Interaction Model. R package version 0.0.0.9000, https://fabrice-rossi.github.io/blvim/.","code":"@Manual{,   title = {blvim: Boltzmann–Lotka–Volterra Interaction Model},   author = {Fabrice Rossi},   year = {2025},   note = {R package version 0.0.0.9000},   url = {https://fabrice-rossi.github.io/blvim/}, }"},{"path":"https://fabrice-rossi.github.io/blvim/index.html","id":"boltzmannlotkavolterra-interaction-model","dir":"","previous_headings":"","what":"Boltzmann–Lotka–Volterra Interaction Model","title":"Boltzmann–Lotka–Volterra Interaction Model","text":"blvim implements . Wilson’s Boltzmann–Lotka–Volterra (BLV) interaction model. model described Wilson, . (2008), “Boltzmann, Lotka Volterra spatial structural evolution: integrated methodology dynamical systems”, J. R. Soc. Interface, 5:865–871. package’s primary goal provide fast implementation BLV model, complete collection tools designed explore results statistical summaries graphical representations. secondary goal facilitate systematic assessment model parameters impact results, using summaries graphical representations (see vignette(\"grid\") details aspect).","code":""},{"path":"https://fabrice-rossi.github.io/blvim/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Boltzmann–Lotka–Volterra Interaction Model","text":"can install development version blvim GitHub :","code":"# install.packages(\"pak\") pak::pak(\"fabrice-rossi/blvim\")"},{"path":"https://fabrice-rossi.github.io/blvim/index.html","id":"spatial-interaction-models","dir":"","previous_headings":"","what":"Spatial interaction models","title":"Boltzmann–Lotka–Volterra Interaction Model","text":"Spatial interaction models aim estimate flows locations, workers commuting residential zones employment zones. blvim package focuses maximum entropy models developed Alan Wilson. See vignette(\"theory\") theoretical background. practice, \\(n\\) origin locations \\(p\\) destination locations, goal compute flow matrix \\((Y_{ij})_{1\\leq \\leq n, 1\\leq j\\leq p}\\), \\(Y_{ij}\\) flow origin \\(\\) destination \\(j\\). computation relies characteristics origin destination locations, along matrix exchange difficulties, known cost matrix, \\((c_{ij})_{1\\leq \\leq n, 1\\leq j\\leq p}\\). example, \\(c_{ij}\\) can represent distance origin \\(\\) destination \\(j\\).","code":""},{"path":"https://fabrice-rossi.github.io/blvim/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Boltzmann–Lotka–Volterra Interaction Model","text":"package loaded standard way.","code":"library(blvim)"},{"path":"https://fabrice-rossi.github.io/blvim/index.html","id":"input-data","dir":"","previous_headings":"Usage","what":"Input data","title":"Boltzmann–Lotka–Volterra Interaction Model","text":"compute spatial interaction model blvim, need least cost matrix. example, use distance random locations. Additionally, since focus production-constrained models, must specify production origin location (vector positive values \\((X_i)_{1\\leq \\leq n}\\)). , assume common unitary production. Finally, simple static model requires attractiveness value destination location, vector positive values \\((Z_j)_{1\\leq j\\leq p}\\). assume common unitary attractiveness.","code":"set.seed(42) ## random origin locations origins <- matrix(runif(2 * 30), ncol = 2) ## random destination locations destinations <- matrix(runif(2 * 10), ncol = 2) ## cost matrix full_costs <- as.matrix(dist(rbind(origins, destinations))) cost_matrix <- full_costs[1:nrow(origins), (nrow(origins) + 1):(nrow(origins) + nrow(destinations))] X <- rep(1, nrow(origins)) Z <- rep(1, nrow(destinations))"},{"path":"https://fabrice-rossi.github.io/blvim/index.html","id":"static-models","dir":"","previous_headings":"Usage","what":"Static models","title":"Boltzmann–Lotka–Volterra Interaction Model","text":"Wilson’s production-constrained maximum entropy model, flows given \\[ Y_{ij} = \\frac{X_iZ_j^{\\alpha}\\exp(-\\beta c_{ij})}{\\sum_{k=1}^pZ_k^{\\alpha}\\exp(-\\beta c_{ik})}, \\] \\(\\alpha\\) return--scale parameter \\(\\beta\\) inverse cost scale parameter. Note flow matrix production-constrained, meaning total outgoing flow origin location equals production location: \\[ \\forall ,\\quad X_i=\\sum_{j=1}^{p}Y_{ij}. \\] model obtained using static_blvim() function: Several functions provided extract parts result. particular flows() returns flow matrix \\(Y\\). can displayed using, instance, image() function.  representation, row shows flows one origin location destination locations. package also provides ggplot2::autoplot() function, can used follows:   two figures exemplify, different values parameters \\(\\alpha\\) \\(\\beta\\) result less concentrated flows.","code":"a_model <- static_blvim(cost_matrix, X, alpha = 1.1, beta = 2, Z) a_model #> Spatial interaction model with 30 origin locations and 10 destination locations #> • Model: Wilson's production constrained #> • Parameters: return to scale (alpha) = 1.1 and inverse cost scale (beta) = 2 a_model_flows <- flows(a_model) par(mar = rep(0.1, 4)) image(t(a_model_flows),   col = gray.colors(20, start = 1, end = 0),   axes = FALSE,   frame = TRUE ) library(ggplot2) autoplot(a_model, \"full\") +   scale_fill_gradient(low = \"white\", high = \"black\") +   coord_fixed() b_model <- static_blvim(cost_matrix, X, alpha = 1.1, beta = 15, Z) b_model #> Spatial interaction model with 30 origin locations and 10 destination locations #> • Model: Wilson's production constrained #> • Parameters: return to scale (alpha) = 1.1 and inverse cost scale (beta) = 15 autoplot(b_model) +   scale_fill_gradient(low = \"white\", high = \"black\") +   coord_fixed()"},{"path":"https://fabrice-rossi.github.io/blvim/index.html","id":"dynamic-models","dir":"","previous_headings":"Usage","what":"Dynamic models","title":"Boltzmann–Lotka–Volterra Interaction Model","text":". Wilson’s Boltzmann–Lotka–Volterra (BLV) interaction model builds upon production-constrained maximum entropy model. core idea update attractiveness destination locations based incoming flows. Ideally, aim following condition hold limit: \\[ Z_j =\\sum_{=1}^{n}Y_{ij}, \\] flows given equations . model estimated using blvim() function follows. Notice start initial values attractiveness, final values different. final values can obtained using attractiveness() function (visualised using bar plot). particular example, one destination location acts global attractor flows. pattern also visible final flow matrix.  autoplot() function can also used show destination flows attractivenesses values:  Naturally, results strongly influenced parameters, shown second example.","code":"a_blv_model <- blvim(cost_matrix, X, alpha = 1.1, beta = 2, Z) a_blv_model #> Spatial interaction model with 30 origin locations and 10 destination locations #> • Model: Wilson's production constrained #> • Parameters: return to scale (alpha) = 1.1 and inverse cost scale (beta) = 2 #> ℹ The BLV model converged after 5800 iterations. par(mar = c(0.1, 4, 1, 0)) a_final_Z <- attractiveness(a_blv_model) barplot(a_final_Z) autoplot(a_blv_model) +   scale_fill_gradient(low = \"white\", high = \"black\") autoplot(a_blv_model, \"attractiveness\") b_blv_model <- blvim(cost_matrix, X, alpha = 1.1, beta = 15, Z) b_blv_model #> Spatial interaction model with 30 origin locations and 10 destination locations #> • Model: Wilson's production constrained #> • Parameters: return to scale (alpha) = 1.1 and inverse cost scale (beta) = 15 #> ℹ The BLV model converged after 13300 iterations. autoplot(b_blv_model, \"attractiveness\") autoplot(b_blv_model) +   scale_fill_gradient(low = \"white\", high = \"black\")"},{"path":"https://fabrice-rossi.github.io/blvim/reference/attractiveness.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract the attractivenesses from a spatial interaction model object — attractiveness","title":"Extract the attractivenesses from a spatial interaction model object — attractiveness","text":"Extract attractivenesses spatial interaction model object","code":""},{"path":"https://fabrice-rossi.github.io/blvim/reference/attractiveness.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract the attractivenesses from a spatial interaction model object — attractiveness","text":"","code":"attractiveness(sim, ...)"},{"path":"https://fabrice-rossi.github.io/blvim/reference/attractiveness.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract the attractivenesses from a spatial interaction model object — attractiveness","text":"sim spatial interaction model object ... additional parameters","code":""},{"path":"https://fabrice-rossi.github.io/blvim/reference/attractiveness.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract the attractivenesses from a spatial interaction model object — attractiveness","text":"vector attractivenesses destination locations","code":""},{"path":"https://fabrice-rossi.github.io/blvim/reference/attractiveness.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract the attractivenesses from a spatial interaction model object — attractiveness","text":"","code":"positions <- matrix(rnorm(10 * 2), ncol = 2) distances <- as.matrix(dist(positions)) production <- rep(1, 10) attractiveness <- c(2, rep(1, 9)) model <- static_blvim(distances, production, 1.5, 1, attractiveness) attractiveness(model) #>  1  2  3  4  5  6  7  8  9 10  #>  2  1  1  1  1  1  1  1  1  1"},{"path":"https://fabrice-rossi.github.io/blvim/reference/autoplot.sim.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a complete ggplot for a spatial interaction model — autoplot.sim","title":"Create a complete ggplot for a spatial interaction model — autoplot.sim","text":"function represents graphical flows spatial interaction model, different direct aggregated forms.","code":""},{"path":"https://fabrice-rossi.github.io/blvim/reference/autoplot.sim.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a complete ggplot for a spatial interaction model — autoplot.sim","text":"","code":"# S3 method for class 'sim' autoplot(   object,   flows = c(\"full\", \"destination\", \"attractiveness\"),   with_names = FALSE,   with_positions = FALSE,   cut_off = 100 * .Machine$double.eps^0.5,   adjust_limits = FALSE,   with_labels = FALSE,   ... )"},{"path":"https://fabrice-rossi.github.io/blvim/reference/autoplot.sim.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a complete ggplot for a spatial interaction model — autoplot.sim","text":"object spatial interaction model object flows \"full\" (default),  \"destination\" \"attractiveness\", see details. with_names specifies whether graphical representation includes location names (FALSE default) with_positions specifies whether graphical representation based location positions (FALSE default) cut_off cut limit inclusion graphical primitive with_positions = TRUE. full flow matrix representation, segments removed flow smaller cut . attractiveness destination representation, disks removed corresponding value cut . adjust_limits FALSE (default value), limits position based graph adjusted removing graphical primitives. eases comparison graphical representations different cut value. TRUE, limits adjusted data using standard ggplot2 behaviour. with_labels FALSE (default value) names displayed using plain texts. TRUE, names shown using labels. ... additional parameters, see details","code":""},{"path":"https://fabrice-rossi.github.io/blvim/reference/autoplot.sim.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a complete ggplot for a spatial interaction model — autoplot.sim","text":"ggplot object","code":""},{"path":"https://fabrice-rossi.github.io/blvim/reference/autoplot.sim.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a complete ggplot for a spatial interaction model — autoplot.sim","text":"graphical representation depends values flows with_positions. based data frame representation produced fortify.sim(). with_position FALSE (default value), graphical representations \"abstract\". Depending flows following representations: \"full\": default case full flow matrix represented. extracted spatial interaction model flows() displayed using matrix representation origin locations rows destination locations columns. colour cell corresponds intensity flow corresponding locations. mimic standard top bottom reading order flow matrix, top row graphical representation corresponds first origin location. \"destination\": function computes incoming flows destination locations (using destination_flow()) represents bar plot (bar proportional incoming flow); \"attractiveness\": function uses bar plot represent attractivenesses destination locations (given attractiveness()). interesting dynamic models values updated iterations (see blvim() details). calculation converged (see sim_converged()), \"destination\" \"attractiveness\" graphics almost identical. with_names parameter TRUE, location names (location_names()) used label axis graphical representation. names specified, replaced indexes.  with_positions parameter TRUE, location positions (location_positions()) used produce \"geographically informed\" representations. Notice positions known locations, use with_positions = TRUE error. Depending flows following representations: \"full\": default case full flow matrix represented. Positions origin destination locations needed. representation uses arrows origin location positions destination location positions. thickness lines (linewidth aesthetics) proportional flows. segments carry flow cut_off value included. spatial interaction model bipartite (see sim_is_bipartite()), zero length segments corresponding self exchange removed. Additional parameters ... submitted ggplot2::geom_segment(). can used override defaults parameters used arrow shapes, instance. parameters must named. \"destination\": function draws disk destination location using size aesthetics incoming flow destination location (using destination_flow()). destinations incoming flow  cut_off value included. \"attractiveness\": function draws disk destination location using size aesthetics attractiveness destination. calculation converged (see sim_converged()), \"destination\" \"attractiveness\" graphics almost identical. destinations attractiveness  cut_off value included. last two representations with_names TRUE, names destinations added graphical representation. with_labels TRUE names represented labels instead plain texts (see ggplot2::geom_label()). ggrepel package installed, functions used instead ggplot2 native functions.","code":""},{"path":[]},{"path":"https://fabrice-rossi.github.io/blvim/reference/autoplot.sim.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a complete ggplot for a spatial interaction model — autoplot.sim","text":"","code":"positions <- matrix(rnorm(10 * 2), ncol = 2) distances <- as.matrix(dist(positions)) production <- rep(1, 10) attractiveness <- c(2, rep(1, 9)) flows <- blvim(distances, production, 1.5, 4, attractiveness,   origin_data = list(names = LETTERS[1:10], positions = positions),   destination_data = list(names = LETTERS[1:10], positions = positions) ) ggplot2::autoplot(flows)  ## bar plots should be almost identical if convergence occurred sim_converged(flows) #> [1] TRUE ggplot2::autoplot(flows, \"destination\")  ggplot2::autoplot(flows, \"attractiveness\")  ## names inclusion ggplot2::autoplot(flows, \"destination\", with_names = TRUE)  ggplot2::autoplot(flows, with_names = TRUE)  ## positions ggplot2::autoplot(flows, \"attractiveness\", with_positions = TRUE) +   ggplot2::scale_size_continuous(range = c(0, 6))  ggplot2::autoplot(flows, \"destination\",   with_positions = TRUE,   with_names = TRUE ) +   ggplot2::scale_size_continuous(range = c(0, 6))  ggplot2::autoplot(flows, \"destination\",   with_positions = TRUE,   with_names = TRUE, with_labels = TRUE ) +   ggplot2::scale_size_continuous(range = c(0, 6))  ggplot2::autoplot(flows, with_positions = TRUE) +   ggplot2::scale_linewidth_continuous(range = c(0, 2))  ggplot2::autoplot(flows,   with_positions = TRUE,   arrow = ggplot2::arrow(length = ggplot2::unit(0.025, \"npc\")) ) +   ggplot2::scale_linewidth_continuous(range = c(0, 2))"},{"path":"https://fabrice-rossi.github.io/blvim/reference/autoplot.sim_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a complete ggplot for a spatial interaction models data frame — autoplot.sim_df","title":"Create a complete ggplot for a spatial interaction models data frame — autoplot.sim_df","text":"function uses tile plot ggplot2 display single value parameter pairs used produce collection spatial interaction models.","code":""},{"path":"https://fabrice-rossi.github.io/blvim/reference/autoplot.sim_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a complete ggplot for a spatial interaction models data frame — autoplot.sim_df","text":"","code":"# S3 method for class 'sim_df' autoplot(object, value, inverse = TRUE, ...)"},{"path":"https://fabrice-rossi.github.io/blvim/reference/autoplot.sim_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a complete ggplot for a spatial interaction models data frame — autoplot.sim_df","text":"object data frame spatial interaction models, object class sim_df value value display, default diversity unspecified inverse whether use cost scale parameter (default) ... additional parameters (used currently)","code":""},{"path":"https://fabrice-rossi.github.io/blvim/reference/autoplot.sim_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a complete ggplot for a spatial interaction models data frame — autoplot.sim_df","text":"ggplot object","code":""},{"path":"https://fabrice-rossi.github.io/blvim/reference/autoplot.sim_df.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a complete ggplot for a spatial interaction models data frame — autoplot.sim_df","text":"value display specified via expression evaluated context data frame. defaults diversity computed diversity(). See examples use. horizontal axis used default cost scale parameter, \\(1/\\beta\\). general easier read using inverse cost scale. inverse parameter can used turn feature. vertical axis used default return scale parameter.","code":""},{"path":[]},{"path":"https://fabrice-rossi.github.io/blvim/reference/autoplot.sim_df.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a complete ggplot for a spatial interaction models data frame — autoplot.sim_df","text":"","code":"positions <- matrix(rnorm(10 * 2), ncol = 2) distances <- as.matrix(dist(positions)) production <- rep(1, 10) attractiveness <- c(2, rep(1, 9)) all_flows <- grid_blvim(distances, production, seq(1.05, 1.55, by = 0.05),   seq(1, 3, by = 0.5),   attractiveness,   bipartite = FALSE,   epsilon = 0.1, iter_max = 1000 ) all_flows_df <- sim_df(all_flows)  ## default display: Shannon diversity ggplot2::autoplot(all_flows_df)  ## iterations ggplot2::autoplot(all_flows_df, iterations)  ## we leverage non standard evaluation to compute a different diversity ggplot2::autoplot(all_flows_df, diversity(sim, \"RW\"))  ## or to refer to columns of the data frame, either default ones ggplot2::autoplot(all_flows_df, converged)  ggplot2::autoplot(all_flows_df, iterations)  ## or added ones all_flows_df[\"Nystuen & Dacey\"] <- diversity(sim_column(all_flows_df), \"ND\") ggplot2::autoplot(all_flows_df, `Nystuen & Dacey`)"},{"path":"https://fabrice-rossi.github.io/blvim/reference/autoplot.sim_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a complete variability for a collection of spatial interaction models — autoplot.sim_list","title":"Create a complete variability for a collection of spatial interaction models — autoplot.sim_list","text":"function represents graphically variability flows represented spatial interaction models contained collection (sim_list object).","code":""},{"path":"https://fabrice-rossi.github.io/blvim/reference/autoplot.sim_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a complete variability for a collection of spatial interaction models — autoplot.sim_list","text":"","code":"# S3 method for class 'sim_list' autoplot(   object,   flows = c(\"full\", \"destination\", \"attractiveness\"),   with_names = FALSE,   with_positions = FALSE,   cut_off = 100 * .Machine$double.eps^0.5,   adjust_limits = FALSE,   with_labels = FALSE,   qmin = 0.05,   qmax = 0.95,   normalisation = c(\"origin\", \"full\", \"none\"),   ... )"},{"path":"https://fabrice-rossi.github.io/blvim/reference/autoplot.sim_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a complete variability for a collection of spatial interaction models — autoplot.sim_list","text":"object collection spatial interaction models, sim_list flows \"full\" (default),  \"destination\" \"attractiveness\", see details. with_names specifies whether graphical representation includes location names (FALSE default) with_positions specifies whether graphical representation based location positions (FALSE default) cut_off cut limit inclusion graphical primitive with_positions = TRUE. attractiveness destination representation, circles removed corresponding upper quantile value cut . adjust_limits FALSE (default value), limits position based graph adjusted removing graphical primitives. eases comparison graphical representations different cut value. TRUE, limits adjusted data using standard ggplot2 behaviour. with_labels FALSE (default value) names displayed using plain texts. TRUE, names shown using labels. qmin lower quantile, see details (default: 0.05) qmax upper quantile, see details (default: 0.95) normalisation flows=\"full\", flows can reported without normalisation (normalisation=\"none\") can normalised, either sum one origin location (normalisation=\"origin\", default value) sum one globally (normalisation=\"full\"). ... additional parameters, used currently","code":""},{"path":"https://fabrice-rossi.github.io/blvim/reference/autoplot.sim_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a complete variability for a collection of spatial interaction models — autoplot.sim_list","text":"ggplot object","code":""},{"path":"https://fabrice-rossi.github.io/blvim/reference/autoplot.sim_list.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a complete variability for a collection of spatial interaction models — autoplot.sim_list","text":"graphical representation depends values flows with_positions. based data frame representation produced fortify.sim_list(). cases, variations flows represented via quantiles distribution collection models. instance, flows \"destination\", function computes quantiles incoming flows observed collection destination. consider three quantiles: lower quantile qmin defaulting 0.05; median; upper quantile qmax defaulting 0.95. with_position FALSE (default value), graphical representations \"abstract\". Depending flows following representations: \"full\": function displays quantiles collection models flows using nested squares (flows()). graph organised matrix origin locations rows destination locations columns. row column intersection, three nested squares represent respectively lower quantile, median upper quantile distribution flows corresponding origin destination locations collection models. median square borders thicker two squares. area square proportional represented value. \"destination\": function displays quantiles collection models incoming flows destination location (using destination_flow()). Quantiles represented using ggplot2::geom_crossbar(): location represented rectangle spans lower quantile upper quantile. intermediate thicker bar represents median quantile. \"attractiveness\": function displays quantiles collection models attractiveness destination location (given attractiveness()). graphical representation \"destination\". interesting dynamic models values updated iterations (see blvim() details). calculation converged (see sim_converged()), \"destination\" \"attractiveness\" graphics almost identical. with_names parameter TRUE, location names (location_names()) used label axis graphical representation. names specified, replaced indexes. with_positions parameter TRUE, location positions (location_positions()) used produce \"geographically informed\" representations. Notice positions known locations, use with_positions = TRUE error. Moreover, flows = \"full\" supported: function issue warning revert position free representation value used. representations flows=\"destination\" flows=\"attractiveness\" based principle. destination location represented collection three nested circles centred corresponding location position, representing respectively lower quantile, median upper quantile incoming flows attractivenesses. diameters circles proportional quantities represent. border ot median circle thicker ones circles. with_positions with_names TRUE, names destinations added graphical representation. with_labels TRUE names represented labels instead plain texts (see ggplot2::geom_label()). ggrepel package installed, functions used instead ggplot2 native functions.","code":""},{"path":[]},{"path":"https://fabrice-rossi.github.io/blvim/reference/autoplot.sim_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a complete variability for a collection of spatial interaction models — autoplot.sim_list","text":"","code":"positions <- matrix(rnorm(10 * 2), ncol = 2) distances <- as.matrix(dist(positions)) production <- c(2, rep(1, 9)) attractiveness <- c(2, rep(1, 9)) all_flows <- grid_blvim(distances, production, seq(1.05, 1.45, by = 0.1),   seq(1, 3, by = 0.5),   attractiveness,   bipartite = FALSE,   epsilon = 0.1, iter_max = 1000,   destination_data = list(names = LETTERS[1:10], positions = positions),   origin_data = list(names = LETTERS[1:10], positions = positions), ) ggplot2::autoplot(all_flows, with_names = TRUE)  ggplot2::autoplot(all_flows, with_names = TRUE, normalisation = \"none\")  ggplot2::autoplot(all_flows,   flow = \"destination\", with_names = TRUE,   qmin = 0, qmax = 1 )  ggplot2::autoplot(all_flows,   flow = \"destination\", with_positions = TRUE,   qmin = 0, qmax = 1 ) + ggplot2::scale_size_continuous(range = c(0, 6))  ggplot2::autoplot(all_flows,   flow = \"destination\", with_positions = TRUE,   qmin = 0, qmax = 1,   cut_off = 1.1 )  ggplot2::autoplot(all_flows,   flow = \"destination\", with_positions = TRUE,   with_names = TRUE,   with_labels = TRUE,   qmin = 0, qmax = 1,   cut_off = 1.1 )"},{"path":"https://fabrice-rossi.github.io/blvim/reference/blvim.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute an equilibrium solution of the Boltzmann–Lotka–Volterra model — blvim","title":"Compute an equilibrium solution of the Boltzmann–Lotka–Volterra model — blvim","text":"function computes flows origin locations destination locations equilibrium solution . Wilson's Boltzmann–Lotka–Volterra (BLV) interaction model. BLV dynamic model initialised production constraints origin locations initial values attractiveness destination locations. Iterations update attractivenesses according received flows.","code":""},{"path":"https://fabrice-rossi.github.io/blvim/reference/blvim.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute an equilibrium solution of the Boltzmann–Lotka–Volterra model — blvim","text":"","code":"blvim(   costs,   X,   alpha,   beta,   Z,   bipartite = TRUE,   origin_data = NULL,   destination_data = NULL,   epsilon = 0.01,   iter_max = 50000,   conv_check = 100,   precision = 1e-06,   quadratic = FALSE )"},{"path":"https://fabrice-rossi.github.io/blvim/reference/blvim.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute an equilibrium solution of the Boltzmann–Lotka–Volterra model — blvim","text":"costs cost matrix X vector production constraints alpha return scale parameter beta inverse cost scale parameter Z vector initial destination attractivenesses bipartite TRUE (default value), origin destination locations considered distinct. FALSE, single set locations plays roles. consequences functions specific latter case terminals(). origin_data NULL list additional data origin locations (see details) destination_data NULL list additional data destination locations (see details) epsilon update intensity iter_max maximal number steps BLV dynamic conv_check number iterations convergence test precision convergence threshold quadratic selects update rule, see details.","code":""},{"path":"https://fabrice-rossi.github.io/blvim/reference/blvim.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute an equilibrium solution of the Boltzmann–Lotka–Volterra model — blvim","text":"object class sim(sim_blvim) spatial interaction model contains matrix flows origin destination locations well final attractivenesses computed model.","code":""},{"path":"https://fabrice-rossi.github.io/blvim/reference/blvim.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute an equilibrium solution of the Boltzmann–Lotka–Volterra model — blvim","text":"step BLV model, flows computed according production constrained entropy maximising model proposed . Wilson implemented static_blvim(). flows received destination computed follows $$\\forall j,\\quad D_j=\\sum_{=1}^{n}Y_{ij},$$ destination \\(j\\). enables updating attractivenesses making closer received flows, .e. trying reduce \\(|D_j-Z_j|\\). . Wilson co-authors proposed two different update strategies: original model proposed Harris & Wilson (1978) updates \\(Z_j\\) follows $$Z_j^{t+1} = Z_j^{t} + \\epsilon (D^{t}_j-Z^{t}_j)$$ Wilson (2008), update given $$Z_j^{t+1} = Z_j^{t} + \\epsilon (D^{t}_j-Z^{t}_j)Z^{t}_j$$ cases, \\(\\epsilon\\) given epsilon parameter. smaller 1. first update used quadratic parameter FALSE default value. second update used quadratic TRUE. Updates performed convergence maximum iter_max iterations. Convergence checked every conv_check iterations. algorithm considered converged $$\\|Z^{t+1}-Z^t\\|<\\delta (\\|Z^{t+1}\\|+\\delta),$$ \\(\\delta\\) given precision parameter.","code":""},{"path":"https://fabrice-rossi.github.io/blvim/reference/blvim.html","id":"location-data","dir":"Reference","previous_headings":"","what":"Location data","title":"Compute an equilibrium solution of the Boltzmann–Lotka–Volterra model — blvim","text":"models package use location data beyond X Z, additional data can stored used analysing spatial interaction models.","code":""},{"path":"https://fabrice-rossi.github.io/blvim/reference/blvim.html","id":"origin-and-destination-location-names","dir":"Reference","previous_headings":"","what":"Origin and destination location names","title":"Compute an equilibrium solution of the Boltzmann–Lotka–Volterra model — blvim","text":"Spatial interaction models can store names origin destination locations, using origin_names<-() destination_names<-(). Names taken default names cost matrix costs. precisely, rownames(costs) used origin location names colnames(costs) destination location names.","code":""},{"path":"https://fabrice-rossi.github.io/blvim/reference/blvim.html","id":"origin-and-destination-location-positions","dir":"Reference","previous_headings":"","what":"Origin and destination location positions","title":"Compute an equilibrium solution of the Boltzmann–Lotka–Volterra model — blvim","text":"Spatial interaction models can store positions origin destination locations, using origin_positions<-() destination_positions<-().","code":""},{"path":"https://fabrice-rossi.github.io/blvim/reference/blvim.html","id":"specifying-location-data","dir":"Reference","previous_headings":"","what":"Specifying location data","title":"Compute an equilibrium solution of the Boltzmann–Lotka–Volterra model — blvim","text":"addition functions mentioned , location data can specified directly using origin_data destination_data parameters. Data given list whose components interpreted excepted following ones: names used specify location names content follow restrictions documented origin_names<-() destination_names<-() positions used specify location positions content follow restrictions documented origin_positions<-() destination_positions<-()","code":""},{"path":"https://fabrice-rossi.github.io/blvim/reference/blvim.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Compute an equilibrium solution of the Boltzmann–Lotka–Volterra model — blvim","text":"Harris, B., & Wilson, . G. (1978). \"Equilibrium Values Dynamics Attractiveness Terms Production-Constrained Spatial-Interaction Models\", Environment Planning : Economy Space, 10(4), 371-388. doi:10.1068/a100371 Wilson, . (2008), \"Boltzmann, Lotka Volterra spatial structural evolution: integrated methodology dynamical systems\", J. R. Soc. Interface.5865–871 doi:10.1098/rsif.2007.1288","code":""},{"path":"https://fabrice-rossi.github.io/blvim/reference/blvim.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute an equilibrium solution of the Boltzmann–Lotka–Volterra model — blvim","text":"","code":"positions <- matrix(rnorm(10 * 2), ncol = 2) distances <- as.matrix(dist(positions)) production <- rep(1, 10) attractiveness <- c(2, rep(1, 9)) flows <- blvim(distances, production, 1.5, 1, attractiveness) flows #> Spatial interaction model with 10 origin locations and 10 destination locations #> • Model: Wilson's production constrained #> • Parameters: return to scale (alpha) = 1.5 and inverse cost scale (beta) = 1 #> ℹ The BLV model converged after 1700 iterations."},{"path":"https://fabrice-rossi.github.io/blvim/reference/costs.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract the cost matrix used to compute this model — costs","title":"Extract the cost matrix used to compute this model — costs","text":"Extract cost matrix used compute model","code":""},{"path":"https://fabrice-rossi.github.io/blvim/reference/costs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract the cost matrix used to compute this model — costs","text":"","code":"costs(sim, ...)"},{"path":"https://fabrice-rossi.github.io/blvim/reference/costs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract the cost matrix used to compute this model — costs","text":"sim spatial interaction model cost matrix ... additional parameters","code":""},{"path":"https://fabrice-rossi.github.io/blvim/reference/costs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract the cost matrix used to compute this model — costs","text":"cost matrix","code":""},{"path":"https://fabrice-rossi.github.io/blvim/reference/costs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract the cost matrix used to compute this model — costs","text":"","code":"positions <- matrix(rnorm(10 * 2), ncol = 2) distances <- as.matrix(dist(positions)) production <- rep(1, 10) attractiveness <- c(2, rep(1, 9)) model <- static_blvim(distances, production, 1.5, 1, attractiveness) costs(model) ## should be equal to distances above #>            1         2         3        4         5        6         7 #> 1  0.0000000 1.1925495 1.3211304 2.316501 0.8055599 2.551823 1.9200999 #> 2  1.1925495 0.0000000 1.0595549 2.600269 0.8845568 1.420838 1.1787539 #> 3  1.3211304 1.0595549 0.0000000 1.560583 0.5164343 2.283101 0.7114704 #> 4  2.3165011 2.6002688 1.5605830 0.000000 1.7985287 3.821769 1.9565093 #> 5  0.8055599 0.8845568 0.5164343 1.798529 0.0000000 2.280105 1.1453935 #> 6  2.5518225 1.4208385 2.2831006 3.821769 2.2801054 0.000000 1.9518406 #> 7  1.9200999 1.1787539 0.7114704 1.956509 1.1453935 1.951841 0.0000000 #> 8  1.4499246 1.5326705 0.5112804 1.067611 0.7675796 2.794379 1.0940947 #> 9  3.1004639 2.9376507 1.9326500 1.171765 2.3808575 3.827040 1.8936283 #> 10 0.5780662 0.9850948 0.7481489 1.868811 0.2438174 2.404650 1.3889313 #>            8        9        10 #> 1  1.4499246 3.100464 0.5780662 #> 2  1.5326705 2.937651 0.9850948 #> 3  0.5112804 1.932650 0.7481489 #> 4  1.0676106 1.171765 1.8688109 #> 5  0.7675796 2.380858 0.2438174 #> 6  2.7943787 3.827040 2.4046501 #> 7  1.0940947 1.893628 1.3889313 #> 8  0.0000000 1.650867 0.9035321 #> 9  1.6508666 0.000000 2.5490050 #> 10 0.9035321 2.549005 0.0000000"},{"path":"https://fabrice-rossi.github.io/blvim/reference/costs.sim_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract the common cost matrix from a collection of spatial interaction models — costs.sim_list","title":"Extract the common cost matrix from a collection of spatial interaction models — costs.sim_list","text":"Extract common cost matrix collection spatial interaction models","code":""},{"path":"https://fabrice-rossi.github.io/blvim/reference/costs.sim_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract the common cost matrix from a collection of spatial interaction models — costs.sim_list","text":"","code":"# S3 method for class 'sim_list' costs(sim, ...)"},{"path":"https://fabrice-rossi.github.io/blvim/reference/costs.sim_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract the common cost matrix from a collection of spatial interaction models — costs.sim_list","text":"sim collection spatial interaction models, object class sim_list ... additional parameters","code":""},{"path":"https://fabrice-rossi.github.io/blvim/reference/costs.sim_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract the common cost matrix from a collection of spatial interaction models — costs.sim_list","text":"cost matrix","code":""},{"path":[]},{"path":"https://fabrice-rossi.github.io/blvim/reference/costs.sim_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract the common cost matrix from a collection of spatial interaction models — costs.sim_list","text":"","code":"positions <- matrix(rnorm(15 * 2), ncol = 2) distances <- as.matrix(dist(positions)) production <- rep(1, 15) attractiveness <- rep(1, 15) all_flows <- grid_blvim(distances,   production,   c(1.1, 1.25, 1.5),   c(1, 2, 3),   attractiveness,   epsilon = 0.1 ) ## should be TRUE identical(distances, costs(all_flows)) #> [1] TRUE"},{"path":"https://fabrice-rossi.github.io/blvim/reference/destination_flow.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the flows incoming at each destination location — destination_flow","title":"Compute the flows incoming at each destination location — destination_flow","text":"Compute flows incoming destination location","code":""},{"path":"https://fabrice-rossi.github.io/blvim/reference/destination_flow.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the flows incoming at each destination location — destination_flow","text":"","code":"destination_flow(sim, ...)"},{"path":"https://fabrice-rossi.github.io/blvim/reference/destination_flow.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the flows incoming at each destination location — destination_flow","text":"sim spatial interaction model object ... additional parameters","code":""},{"path":"https://fabrice-rossi.github.io/blvim/reference/destination_flow.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the flows incoming at each destination location — destination_flow","text":"vector flows incoming destination locations","code":""},{"path":"https://fabrice-rossi.github.io/blvim/reference/destination_flow.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute the flows incoming at each destination location — destination_flow","text":"","code":"positions <- matrix(rnorm(10 * 2), ncol = 2) distances <- as.matrix(dist(positions)) production <- rep(1, 10) attractiveness <- c(2, rep(1, 9)) model <- static_blvim(distances, production, 1.5, 1, attractiveness) destination_flow(model) #>         1         2         3         4         5         6         7         8  #> 1.7804164 0.8087637 0.9256436 0.9871814 1.0142576 0.8435905 1.0515386 0.9100896  #>         9        10  #> 0.8088468 0.8696718"},{"path":"https://fabrice-rossi.github.io/blvim/reference/destination_names.html","id":null,"dir":"Reference","previous_headings":"","what":"Names of destination locations in a spatial interaction model — destination_names","title":"Names of destination locations in a spatial interaction model — destination_names","text":"Functions get set names destination locations spatial interaction model (collection spatial interaction models).","code":""},{"path":"https://fabrice-rossi.github.io/blvim/reference/destination_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Names of destination locations in a spatial interaction model — destination_names","text":"","code":"destination_names(sim)  destination_names(sim) <- value"},{"path":"https://fabrice-rossi.github.io/blvim/reference/destination_names.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Names of destination locations in a spatial interaction model — destination_names","text":"sim spatial interaction model object (object class sim) collection spatial interaction  models (object class sim_list) value character vector length equal number destination locations, NULL (vectors adapted length converted character vectors)","code":""},{"path":"https://fabrice-rossi.github.io/blvim/reference/destination_names.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Names of destination locations in a spatial interaction model — destination_names","text":"destination_names NULL character vector one name per destination locations model. destination_names<- modified sim object sim_list object.","code":""},{"path":[]},{"path":"https://fabrice-rossi.github.io/blvim/reference/destination_names.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Names of destination locations in a spatial interaction model — destination_names","text":"","code":"positions <- matrix(rnorm(10 * 2), ncol = 2) rownames(positions) <- LETTERS[11:20] distances <- as.matrix(dist(positions)) production <- rep(1, 10) attractiveness <- rep(1, 10) ## the row/column names of the cost matrix are used for the location model <- static_blvim(distances, production, 1.5, 1, attractiveness) destination_names(model) #>  [1] \"K\" \"L\" \"M\" \"N\" \"O\" \"P\" \"Q\" \"R\" \"S\" \"T\" destination_names(model) <- letters[1:10] destination_names(model) #>  [1] \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\" \"j\""},{"path":"https://fabrice-rossi.github.io/blvim/reference/destination_positions.html","id":null,"dir":"Reference","previous_headings":"","what":"positions of destination locations in a spatial interaction model — destination_positions","title":"positions of destination locations in a spatial interaction model — destination_positions","text":"Functions get set positions destination locations spatial interaction model.","code":""},{"path":"https://fabrice-rossi.github.io/blvim/reference/destination_positions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"positions of destination locations in a spatial interaction model — destination_positions","text":"","code":"destination_positions(sim)  destination_positions(sim) <- value"},{"path":"https://fabrice-rossi.github.io/blvim/reference/destination_positions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"positions of destination locations in a spatial interaction model — destination_positions","text":"sim spatial interaction model object value matrix many rows  number destination locations 2 3 columns, NULL","code":""},{"path":"https://fabrice-rossi.github.io/blvim/reference/destination_positions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"positions of destination locations in a spatial interaction model — destination_positions","text":"destination_positions NULL coordinate matrix destination locations. destination_positions<- modified sim object","code":""},{"path":"https://fabrice-rossi.github.io/blvim/reference/destination_positions.html","id":"positions","dir":"Reference","previous_headings":"","what":"Positions","title":"positions of destination locations in a spatial interaction model — destination_positions","text":"Location positions given numeric matrices 2 3 columns. first two columns assumed geographical coordinates 3rd column can used instance store altitude. Coordinates interpreted graphical representations (see autoplot.sim()). matched costs can derived complex movement models non purely geographic considerations.","code":""},{"path":[]},{"path":"https://fabrice-rossi.github.io/blvim/reference/destination_positions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"positions of destination locations in a spatial interaction model — destination_positions","text":"","code":"positions <- matrix(rnorm(10 * 2), ncol = 2) distances <- as.matrix(dist(positions)) production <- rep(1, 10) attractiveness <- rep(1, 10) model <- static_blvim(distances, production, 1.5, 1, attractiveness) destination_positions(model) <- positions destination_positions(model) #>             [,1]        [,2] #>  [1,] -1.0985089  0.55851442 #>  [2,] -0.6331782  0.41540640 #>  [3,] -2.0636545 -1.45229977 #>  [4,]  2.6489320  0.94120612 #>  [5,] -1.1533984 -0.33893587 #>  [6,] -0.3406379 -0.07557425 #>  [7,]  0.7863626  0.04020439 #>  [8,] -1.2705131  0.12430107 #>  [9,]  0.5421415 -0.99843255 #> [10,]  0.0751059  1.23339006"},{"path":"https://fabrice-rossi.github.io/blvim/reference/diversity.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the diversity of the destination flows in a spatial interaction model — diversity","title":"Compute the diversity of the destination flows in a spatial interaction model — diversity","text":"function computes diversity destination flows according different definitions aim estimating number active destinations, .e., number destination locations receive \"significant fraction\" total flow. function applies also collection spatial interaction models represented sim_list.","code":""},{"path":"https://fabrice-rossi.github.io/blvim/reference/diversity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the diversity of the destination flows in a spatial interaction model — diversity","text":"","code":"diversity(sim, definition = c(\"shannon\", \"renyi\", \"ND\", \"RW\"), order = 1L, ...)  # S3 method for class 'sim' diversity(sim, definition = c(\"shannon\", \"renyi\", \"ND\", \"RW\"), order = 1L, ...)  # S3 method for class 'sim_list' diversity(sim, definition = c(\"shannon\", \"renyi\", \"ND\", \"RW\"), order = 1L, ...)"},{"path":"https://fabrice-rossi.github.io/blvim/reference/diversity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the diversity of the destination flows in a spatial interaction model — diversity","text":"sim spatial interaction model object (object class sim) collection spatial interaction  models (object class sim_list) definition diversity definition \"shannon\" (default), \"renyi\" (see details) definition supported  terminals() order order Rényi entropy, used definition=\"renyi\" ... additional parameters","code":""},{"path":"https://fabrice-rossi.github.io/blvim/reference/diversity.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the diversity of the destination flows in a spatial interaction model — diversity","text":"diversity destination flows (one value per spatial interaction model)","code":""},{"path":"https://fabrice-rossi.github.io/blvim/reference/diversity.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute the diversity of the destination flows in a spatial interaction model — diversity","text":"\\(Y\\) flow matrix, destination flows computed follows $$\\forall j,\\quad D_j=\\sum_{=1}^{n}Y_{ij},$$ destination \\(j\\) (see destination_flow()). compute diversity using entropy based definitions, flows first normalised interpreted probability distribution destination locations. use $$\\forall j,\\quad p_j=\\frac{D_j}{\\sum_{k=1}^n D_k}.$$ classic diversity index given exponential Shannon's entropy (parameter definition=\"shannon\"). gives $$\\text{diversity}(p, \\text{Shannon})=\\exp\\left(-\\sum_{k=1}^n p_k\\ln p_k\\right).$$ Rényi generalized entropy can used define collection diversity metrics. Rényi diversity order \\(\\gamma\\) exponential Rényi entropy order \\(\\gamma\\) \\(p\\) distribution, $$\\text{diversity}(p, \\text{Rényi}, \\gamma)=\\exp\\left(\\frac{1}{1-\\gamma}\\ln \\left(\\sum_{k=1}^np_k^\\gamma\\right)\\right).$$ defined directly \\(\\gamma\\]0,1[\\cup ]1,\\infty[\\), extensions limit case straightforward: \\(\\gamma=1\\) Shannon's entropy/diversity \\(\\gamma=0\\) max-entropy, \\(\\ln(n)\\) thus corresponding diversity number locations \\(\\gamma=\\infty\\) min-entropy, \\(-\\log \\max_{k}p_k\\) thhe corresponding diversity \\(\\frac{1}{\\max_{k}p_k}\\) definition parameter specifies diversity used calculation. default value shannon Shannon's entropy (case order parameter used). Using renyi gives access Rényi diversities specified order parameter. Large values order tend generate underflows calculation trigger use min-entropy instead exact Rényi entropy. addition entropy based definition, terminal based calculations also provided. Using definition supported terminals() function, diversity number terminals identified. Notice applies interaction models origin destination locations identical, .e. model bipartite. Current values definitions : \"ND\" original Nystuen Dacey definition \"RW\" variant Rihll Wilson See terminals() details. applied collection spatial interaction  models (object class sim_list) function uses parameters (definition order) models returns vector diversities. completely equivalent grid_diversity().","code":""},{"path":"https://fabrice-rossi.github.io/blvim/reference/diversity.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Compute the diversity of the destination flows in a spatial interaction model — diversity","text":"Jost, L. (2006), \"Entropy diversity\", Oikos, 113: 363-375. doi:10.1111/j.2006.0030-1299.14714.x","code":""},{"path":[]},{"path":"https://fabrice-rossi.github.io/blvim/reference/diversity.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute the diversity of the destination flows in a spatial interaction model — diversity","text":"","code":"positions <- matrix(rnorm(10 * 2), ncol = 2) distances <- as.matrix(dist(positions)) production <- rep(1, 10) attractiveness <- c(2, rep(1, 9)) flows <- blvim(distances, production, 1.5, 3, attractiveness, bipartite = FALSE) diversity(flows) #> [1] 6.196688 diversity(flows, \"renyi\", 2) #> [1] 5.45878 diversity(flows, \"RW\") #> [1] 7"},{"path":"https://fabrice-rossi.github.io/blvim/reference/flows.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract the flow matrix from a spatial interaction model object — flows","title":"Extract the flow matrix from a spatial interaction model object — flows","text":"Extract flow matrix spatial interaction model object","code":""},{"path":"https://fabrice-rossi.github.io/blvim/reference/flows.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract the flow matrix from a spatial interaction model object — flows","text":"","code":"flows(sim, ...)"},{"path":"https://fabrice-rossi.github.io/blvim/reference/flows.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract the flow matrix from a spatial interaction model object — flows","text":"sim spatial interaction model object ... additional parameters","code":""},{"path":"https://fabrice-rossi.github.io/blvim/reference/flows.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract the flow matrix from a spatial interaction model object — flows","text":"matrix flows origin locations destination locations","code":""},{"path":"https://fabrice-rossi.github.io/blvim/reference/flows.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract the flow matrix from a spatial interaction model object — flows","text":"","code":"positions <- matrix(rnorm(10 * 2), ncol = 2) distances <- as.matrix(dist(positions)) production <- rep(1, 10) attractiveness <- c(2, rep(1, 9)) model <- static_blvim(distances, production, 1.5, 1, attractiveness) flows(model) #>             1           2          3          4          5          6 #> 1  0.58128391 0.025458910 0.04684689 0.05848390 0.03607918 0.05852402 #> 2  0.13016862 0.371505120 0.07323146 0.01921715 0.05141161 0.05612128 #> 3  0.16018674 0.048975287 0.24845291 0.04934854 0.16702976 0.17155850 #> 4  0.21093941 0.013556383 0.05205350 0.26207147 0.05389922 0.07538260 #> 5  0.13416326 0.037391400 0.18164568 0.05556970 0.27019375 0.16621311 #> 6  0.18546418 0.034784600 0.15899826 0.06623318 0.14164922 0.23026303 #> 7  0.36517338 0.024676357 0.02998645 0.04890420 0.02269232 0.03677474 #> 8  0.14870307 0.009364505 0.03940146 0.17804164 0.04479849 0.05649520 #> 9  0.09976814 0.271448028 0.05424589 0.01409669 0.03857196 0.04113340 #> 10 0.24306093 0.018928499 0.07171756 0.14522908 0.07008341 0.10363505 #>             7           8           9         10 #> 1  0.07132486 0.028850116 0.016822711 0.07632550 #> 2  0.02464276 0.009289214 0.234022328 0.03039045 #> 3  0.02002685 0.026138803 0.031276398 0.07700622 #> 4  0.03445160 0.124586408 0.008573194 0.16448622 #> 5  0.01648154 0.032319753 0.024185371 0.08183643 #> 6  0.02276236 0.034734824 0.021979843 0.10313049 #> 7  0.37201159 0.028231158 0.017923248 0.05362656 #> 8  0.02842123 0.374516251 0.005909444 0.11434871 #> 9  0.02076130 0.006799394 0.430917567 0.02225765 #> 10 0.03335548 0.070648737 0.011951677 0.23138958"},{"path":"https://fabrice-rossi.github.io/blvim/reference/flows_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract the flow matrix from a spatial interaction model object in data frame format — flows_df","title":"Extract the flow matrix from a spatial interaction model object in data frame format — flows_df","text":"Extract flow matrix spatial interaction model object data frame format","code":""},{"path":"https://fabrice-rossi.github.io/blvim/reference/flows_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract the flow matrix from a spatial interaction model object in data frame format — flows_df","text":"","code":"flows_df(sim, ...)"},{"path":"https://fabrice-rossi.github.io/blvim/reference/flows_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract the flow matrix from a spatial interaction model object in data frame format — flows_df","text":"sim spatial interaction model object ... additional parameters (used currently)","code":""},{"path":"https://fabrice-rossi.github.io/blvim/reference/flows_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract the flow matrix from a spatial interaction model object in data frame format — flows_df","text":"data frame flows origin locations destination locations additional content available (see Details).","code":""},{"path":"https://fabrice-rossi.github.io/blvim/reference/flows_df.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract the flow matrix from a spatial interaction model object in data frame format — flows_df","text":"function extracts flow matrix long format. row contains flow origin location destination location. resulting data frame least three columns: origin_idx: identifies origin location index 1 number origin locations destination_idx: identifies destination location index 1 number destination locations flow: flow corresponding location addition, location information available, included data frame follows: location names included using columns origin_name destination_name positions included using 2 3 columns (per location type, origin destination) depending number dimensions used location. names columns default origin_x, origin_y origin_z ( equivalent names destination location) unless coordinate names specified location positions. latter case, names prefixed origin_ destination_. instance, destination location position coordinates named \"longitude\" \"latitude\", resulting columns destination_longitude destination_latitude.","code":""},{"path":[]},{"path":"https://fabrice-rossi.github.io/blvim/reference/flows_df.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract the flow matrix from a spatial interaction model object in data frame format — flows_df","text":"","code":"positions <- matrix(rnorm(10 * 2), ncol = 2) distances <- as.matrix(dist(positions)) production <- rep(1, 10) attractiveness <- c(2, rep(1, 9)) ## simple case (no positions and default names) model <- static_blvim(distances, production, 1.5, 1, attractiveness) head(flows_df(model)) #>   origin_idx destination_idx      flow origin_name destination_name #> 1          1               1 0.5157087           1                1 #> 2          2               1 0.1673249           2                1 #> 3          3               1 0.1451588           3                1 #> 4          4               1 0.2120735           4                1 #> 5          5               1 0.2594128           5                1 #> 6          6               1 0.2453039           6                1 ## with location data model <- static_blvim(distances, production, 1.5, 1, attractiveness,   origin_data = list(positions = positions),   destination_data = list(positions = positions) ) head(flows_df(model)) #>   origin_idx destination_idx      flow origin_name     origin_x   origin_y #> 1          1               1 0.5157087           1  0.239959572 -0.3082114 #> 2          2               1 0.1673249           2  0.060898893  1.0120018 #> 3          3               1 0.1451588           3 -2.177576028 -0.9190516 #> 4          4               1 0.2120735           4 -0.117860143  0.5633801 #> 5          5               1 0.2594128           5  0.112294787  0.3224827 #> 6          6               1 0.2453039           6  0.007886198  0.3666744 #>   destination_name destination_x destination_y #> 1                1     0.2399596    -0.3082114 #> 2                1     0.2399596    -0.3082114 #> 3                1     0.2399596    -0.3082114 #> 4                1     0.2399596    -0.3082114 #> 5                1     0.2399596    -0.3082114 #> 6                1     0.2399596    -0.3082114"},{"path":"https://fabrice-rossi.github.io/blvim/reference/fortify.sim.html","id":null,"dir":"Reference","previous_headings":"","what":"Turn a spatial interaction model into a data frame — fortify.sim","title":"Turn a spatial interaction model into a data frame — fortify.sim","text":"function extracts spatial interaction model different types data frame can used produce graphical representations. autoplot.sim() leverages function produce graphical representations.","code":""},{"path":"https://fabrice-rossi.github.io/blvim/reference/fortify.sim.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Turn a spatial interaction model into a data frame — fortify.sim","text":"","code":"# S3 method for class 'sim' fortify(   model,   data,   flows = c(\"full\", \"destination\", \"attractiveness\"),   with_names = FALSE,   with_positions = FALSE,   cut_off = 100 * .Machine$double.eps^0.5,   ... )"},{"path":"https://fabrice-rossi.github.io/blvim/reference/fortify.sim.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Turn a spatial interaction model into a data frame — fortify.sim","text":"model spatial interaction model object data used flows \"full\" (default),  \"destination\" \"attractiveness\", see details. with_names specifies whether extracted data frame includes location names (FALSE default) with_positions specifies whether extracted data frame based location positions (FALSE default) cut_off cut limit inclusion flow row final data frame. ... additional parameters, used currently","code":""},{"path":"https://fabrice-rossi.github.io/blvim/reference/fortify.sim.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Turn a spatial interaction model into a data frame — fortify.sim","text":"data frame, see details","code":""},{"path":"https://fabrice-rossi.github.io/blvim/reference/fortify.sim.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Turn a spatial interaction model into a data frame — fortify.sim","text":"data frame produced method depends values flows with_positions. general principal one row per flow, either single flow origin location destination location, aggregated flow destination location. Flows stored one column data frame, columns used identify origin destination. with_position FALSE (default value), data frames simple. Depending flows, function extracts different data frames: \"full\": default case full flow matrix extracted. data frame three variables: origin: identifies origin location index 1 number origin locations destination: identifies destination location index 1 number destination locations flow: flow corresponding location recommend use flows_df() control extraction outside simple graphical representations. \"destination\": data frame two three columns: destination: identifies destination location index 1 number destination locations flow: incoming flows (see destination_flow()) name: name destination location with_names TRUE \"attractiveness\": data frame also two ot three columns, destination name previous case attractiveness contains attractivenesses destinations (see attractiveness()).  with_positions parameter TRUE, location positions (location_positions()) used produce \"geographically informed\" extractions. Notice positions known locations, use with_positions = TRUE error. Depending flows following representations: \"full\": default case full flow matrix extracted. Positions origin destination locations needed. data frame contains five columns: x y used coordinates origin locations xend yend used coordinates destination locations flow used flows \"destination\" \"attractiveness\" produce data frame three four columns. with_positions FALSE, one column dedicated either incoming flows (destination_flow()) flows=\"destination\" (name column destination) attractivenesses (attractiveness()), case name attractiveness. two columns used positions destination locations. names names columns positions (colnames(destination_location(object))) \"x\" \"y\", names specified. with_names TRUE, name column included contains names destination locations. position based data frames, rows excluded returned data frames flow represent small, .e. smaller cut_off value.","code":""},{"path":[]},{"path":"https://fabrice-rossi.github.io/blvim/reference/fortify.sim.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Turn a spatial interaction model into a data frame — fortify.sim","text":"","code":"positions <- matrix(rnorm(10 * 2), ncol = 2) distances <- as.matrix(dist(positions)) production <- rep(1, 10) attractiveness <- c(2, rep(1, 9)) flows <- blvim(distances, production, 1.5, 4, attractiveness,   origin_data =     list(names = LETTERS[1:10], positions = positions), destination_data =     list(names = LETTERS[1:10], positions = positions) ) ggplot2::fortify(flows) #>     origin destination         flow #> 1        1           1 9.363958e-01 #> 2        2           1 5.512397e-02 #> 3        3           1 1.206557e-03 #> 4        4           1 1.296843e-03 #> 5        5           1 5.786431e-04 #> 6        6           1 4.567323e-03 #> 7        7           1 1.641468e-03 #> 8        8           1 3.283131e-05 #> 9        9           1 2.302359e-05 #> 10      10           1 3.077053e-05 #> 11       1           2 5.461723e-02 #> 12       2           2 9.414542e-01 #> 13       3           2 9.967551e-05 #> 14       4           2 8.458140e-05 #> 15       5           2 1.382951e-04 #> 16       6           2 2.910898e-03 #> 17       7           2 2.359157e-04 #> 18       8           2 2.203771e-06 #> 19       9           2 1.458340e-06 #> 20      10           2 6.980003e-05 #> 21       1           3 1.222071e-03 #> 22       2           3 1.018939e-04 #> 23       3           3 9.141074e-01 #> 24       4           3 2.621905e-03 #> 25       5           3 1.605526e-05 #> 26       6           3 1.884277e-03 #> 27       7           3 7.675235e-02 #> 28       8           3 2.118452e-04 #> 29       9           3 2.119384e-04 #> 30      10           3 7.354367e-08 #> 31       1           4 9.093927e-04 #> 32       2           4 5.986178e-05 #> 33       3           4 1.815232e-03 #> 34       4           4 8.071021e-01 #> 35       5           4 1.975006e-03 #> 36       6           4 2.864014e-05 #> 37       7           4 2.556197e-04 #> 38       8           4 2.034551e-02 #> 39       9           4 1.375795e-02 #> 40      10           4 2.023025e-06 #> 41       1           5 5.426861e-04 #> 42       2           5 1.309048e-04 #> 43       3           5 1.486642e-05 #> 44       4           5 2.641450e-03 #> 45       5           5 9.954067e-01 #> 46       6           5 2.963299e-06 #> 47       7           5 4.545358e-06 #> 48       8           5 4.193536e-04 #> 49       9           5 1.274669e-04 #> 50      10           5 5.920146e-04 #> 51       1           6 4.354675e-03 #> 52       2           6 2.801121e-03 #> 53       3           6 1.773740e-03 #> 54       4           6 3.894083e-05 #> 55       5           6 3.012531e-06 #> 56       6           6 9.740781e-01 #> 57       7           6 1.510499e-02 #> 58       8           6 1.259804e-06 #> 59       9           6 1.135260e-06 #> 60      10           6 2.332195e-07 #> 61       1           7 1.711273e-03 #> 62       2           7 2.482302e-04 #> 63       3           7 7.900049e-02 #> 64       4           7 3.800296e-04 #> 65       5           7 5.052626e-06 #> 66       6           7 1.651632e-02 #> 67       7           7 9.058140e-01 #> 68       8           7 2.136019e-05 #> 69       9           7 2.103401e-05 #> 70      10           7 5.950504e-08 #> 71       1           8 2.357968e-18 #> 72       2           8 1.597449e-19 #> 73       3           8 1.502171e-17 #> 74       4           8 2.083791e-15 #> 75       5           8 3.211383e-17 #> 76       6           8 9.489835e-20 #> 77       7           8 1.471525e-18 #> 78       8           8 6.291643e-14 #> 79       9           8 7.423137e-15 #> 80      10           8 1.955709e-20 #> 81       1           9 2.180733e-04 #> 82       2           9 1.394117e-05 #> 83       3           9 1.981939e-03 #> 84       4           9 1.858314e-01 #> 85       5           9 1.287327e-03 #> 86       6           9 1.127796e-05 #> 87       7           9 1.911017e-04 #> 88       8           9 9.789654e-01 #> 89       9           9 9.858559e-01 #> 90      10           9 8.619352e-07 #> 91       1          10 2.875530e-05 #> 92       2          10 6.583386e-05 #> 93       3          10 6.785462e-08 #> 94       4          10 2.696002e-06 #> 95       5          10 5.898987e-04 #> 96       6          10 2.285881e-07 #> 97       7          10 5.333960e-08 #> 98       8          10 2.544705e-07 #> 99       9          10 8.504095e-08 #> 100     10          10 9.993042e-01 ggplot2::fortify(flows, flows = \"destination\") #>   destination         flow #> A           1 1.000897e+00 #> B           2 9.996143e-01 #> C           3 9.971298e-01 #> D           4 8.462513e-01 #> E           5 9.998830e-01 #> F           6 9.981572e-01 #> G           7 1.003718e+00 #> H           8 7.247460e-14 #> I           9 2.154357e+00 #> J          10 9.999920e-01 ggplot2::fortify(flows, flows = \"attractiveness\") #>   destination attractiveness #> A           1   1.000897e+00 #> B           2   9.996143e-01 #> C           3   9.971298e-01 #> D           4   8.462535e-01 #> E           5   9.998829e-01 #> F           6   9.981572e-01 #> G           7   1.003718e+00 #> H           8   1.674466e-09 #> I           9   2.154355e+00 #> J          10   9.999920e-01 ## positions ggplot2::fortify(flows, flows = \"attractiveness\", with_positions = TRUE) #>             x          y attractiveness #> 1  -0.1740864 -0.3561244      1.0008972 #> 2  -0.2217445 -1.0644642      0.9996143 #> 3  -1.0095287  1.0771165      0.9971298 #> 4   0.4807253  1.1815756      0.8462535 #> 5   1.6044073  0.1983921      0.9998829 #> 6  -1.5150245 -0.4004052      0.9981572 #> 7  -1.4160239  0.6161543      1.0037179 #> 9   0.6241324  1.8846623      2.1543552 #> 10  2.1122773 -1.5886205      0.9999920 ## names and positions ggplot2::fortify(flows,   flows = \"destination\", with_positions = TRUE,   with_names = TRUE ) #>             x          y destination name #> 1  -0.1740864 -0.3561244   1.0008973    A #> 2  -0.2217445 -1.0644642   0.9996143    B #> 3  -1.0095287  1.0771165   0.9971298    C #> 4   0.4807253  1.1815756   0.8462513    D #> 5   1.6044073  0.1983921   0.9998830    E #> 6  -1.5150245 -0.4004052   0.9981572    F #> 7  -1.4160239  0.6161543   1.0037178    G #> 9   0.6241324  1.8846623   2.1543573    I #> 10  2.1122773 -1.5886205   0.9999920    J ggplot2::fortify(flows, with_positions = TRUE, cut_off = 0.1) #>              x       xend          y       yend      flow #> 1   -0.1740864 -0.1740864 -0.3561244 -0.3561244 0.9363958 #> 12  -0.2217445 -0.2217445 -1.0644642 -1.0644642 0.9414542 #> 23  -1.0095287 -1.0095287  1.0771165  1.0771165 0.9141074 #> 34   0.4807253  0.4807253  1.1815756  1.1815756 0.8071021 #> 45   1.6044073  1.6044073  0.1983921  0.1983921 0.9954067 #> 56  -1.5150245 -1.5150245 -0.4004052 -0.4004052 0.9740781 #> 67  -1.4160239 -1.4160239  0.6161543  0.6161543 0.9058140 #> 84   0.4807253  0.6241324  1.1815756  1.8846623 0.1858314 #> 88   0.8767773  0.6241324  1.9741567  1.8846623 0.9789654 #> 89   0.6241324  0.6241324  1.8846623  1.8846623 0.9858559 #> 100  2.1122773  2.1122773 -1.5886205 -1.5886205 0.9993042"},{"path":"https://fabrice-rossi.github.io/blvim/reference/fortify.sim_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Turn a collection of spatial interaction models into a data frame — fortify.sim_list","title":"Turn a collection of spatial interaction models into a data frame — fortify.sim_list","text":"function extracts collection spatial interaction models (represented sim_list) data frame long format, one flow per row. can seen collection oriented version fortify.sim(). resulting data frame used autoplot.sim_list() produce summary graphics.","code":""},{"path":"https://fabrice-rossi.github.io/blvim/reference/fortify.sim_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Turn a collection of spatial interaction models into a data frame — fortify.sim_list","text":"","code":"# S3 method for class 'sim_list' fortify(   model,   data,   flows = c(\"full\", \"destination\", \"attractiveness\"),   with_names = FALSE,   normalisation = c(\"origin\", \"full\", \"none\"),   ... )"},{"path":"https://fabrice-rossi.github.io/blvim/reference/fortify.sim_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Turn a collection of spatial interaction models into a data frame — fortify.sim_list","text":"model collection spatial interaction models, sim_list data used flows \"full\" (default),  \"destination\" \"attractiveness\", see details. with_names specifies whether extracted data frame includes location names (FALSE default), see details. normalisation flows=\"full\", flows can reported without normalisation (normalisation=\"none\") can normalised, either sum one origin location (normalisation=\"origin\", default value) sum one globally (normalisation=\"full\"). ... additional parameters, used currently","code":""},{"path":"https://fabrice-rossi.github.io/blvim/reference/fortify.sim_list.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Turn a collection of spatial interaction models into a data frame — fortify.sim_list","text":"data frame produced method depends values flows lesser extent value with_names. cases, data frame configuration column identify spatial interaction model values extracted: index model original sim_list. Depending flows following representations: flows=\"full\": default case full flow matrix spatial interaction model extracted. data frame contains 4 columns: origin_idx: identifies origin location index 1 number origin locations destination_idx: identifies destination location index 1 number destination locations flow: flow corresponding location. default, flows normalised origin location (normalisation=\"origin\"): total flows originating origin location normalised 1. normalisation=\"full\", normalisation global: sum flows model normalised 1. normalisation=\"none\" flows normalised. configuration: spatial interaction model index flows=\"destination\" flows=\"attractiveness\", data frame contains 3 4 columns: destination: identifies destination location index 1 number destination locations flow attractiveness depending value \"flows\": contains either destination_flow() attractiveness() destination location configuration: spatial interaction model index name: destination location names with_names=TRUE (column present with_names=FALSE) normalisation operated flows=\"full\" can improve readability graphical representation proposed autoplot.sim_list() production constraints differ significantly one origin location another.","code":""},{"path":[]},{"path":"https://fabrice-rossi.github.io/blvim/reference/fortify.sim_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Turn a collection of spatial interaction models into a data frame — fortify.sim_list","text":"","code":"positions <- matrix(rnorm(10 * 2), ncol = 2) distances <- as.matrix(dist(positions)) production <- rep(1, 10) attractiveness <- c(2, rep(1, 9)) flows_1 <- blvim(distances, production, 1.5, 1, attractiveness) flows_2 <- blvim(distances, production, 1.25, 2, attractiveness) all_flows <- sim_list(list(flows_1, flows_2)) ggplot2::fortify(all_flows) ## somewhat similar to a row bind of sim_df results #>     origin_idx destination_idx         flow configuration #> 1            1               1 1.000000e+00             1 #> 2            2               1 1.000000e+00             1 #> 3            3               1 1.000000e+00             1 #> 4            4               1 1.000000e+00             1 #> 5            5               1 1.000000e+00             1 #> 6            6               1 1.000000e+00             1 #> 7            7               1 1.000000e+00             1 #> 8            8               1 1.000000e+00             1 #> 9            9               1 1.000000e+00             1 #> 10          10               1 1.000000e+00             1 #> 11           1               2 4.908732e-15             1 #> 12           2               2 3.065194e-13             1 #> 13           3               2 4.952635e-15             1 #> 14           4               2 2.125136e-13             1 #> 15           5               2 1.721903e-14             1 #> 16           6               2 1.180991e-13             1 #> 17           7               2 6.865051e-14             1 #> 18           8               2 6.100038e-15             1 #> 19           9               2 6.425110e-14             1 #> 20          10               2 1.769736e-13             1 #> 21           1               3 1.796322e-18             1 #> 22           2               3 1.812388e-18             1 #> 23           3               3 7.349823e-18             1 #> 24           4               3 1.899211e-18             1 #> 25           5               3 2.873487e-18             1 #> 26           6               3 1.863480e-18             1 #> 27           7               3 1.886538e-18             1 #> 28           8               3 1.801946e-18             1 #> 29           9               3 1.808961e-18             1 #> 30          10               3 1.796616e-18             1 #> 31           1               4 5.225295e-18             1 #> 32           2               4 2.262186e-16             1 #> 33           3               4 5.524588e-18             1 #> 34           4               4 5.986791e-16             1 #> 35           5               4 1.334170e-17             1 #> 36           6               4 8.860709e-17             1 #> 37           7               4 8.442193e-17             1 #> 38           8               4 6.382049e-18             1 #> 39           9               4 5.154620e-17             1 #> 40          10               4 1.306361e-16             1 #> 41           1               5 2.330369e-18             1 #> 42           2               5 8.174555e-18             1 #> 43           3               5 3.727775e-18             1 #> 44           4               5 5.950110e-18             1 #> 45           5               5 1.847528e-16             1 #> 46           6               5 2.408686e-17             1 #> 47           7               5 4.655197e-18             1 #> 48           8               5 2.737105e-18             1 #> 49           9               5 9.965047e-18             1 #> 50          10               5 1.085846e-17             1 #> 51           1               6 5.803502e-18             1 #> 52           2               6 1.396264e-16             1 #> 53           3               6 6.020474e-18             1 #> 54           4               6 9.841194e-17             1 #> 55           5               6 5.998542e-17             1 #> 56           6               6 6.380743e-16             1 #> 57           7               6 4.282736e-17             1 #> 58           8               6 7.288181e-18             1 #> 59           9               6 9.002533e-17             1 #> 60          10               6 1.863636e-16             1 #> 61           1               7 3.942443e-17             1 #> 62           2               7 5.513660e-16             1 #> 63           3               7 4.140443e-17             1 #> 64           4               7 6.369567e-16             1 #> 65           5               7 7.875512e-17             1 #> 66           6               7 2.909354e-16             1 #> 67           7               7 6.369771e-16             1 #> 68           8               7 4.809179e-17             1 #> 69           9               7 2.704393e-16             1 #> 70          10               7 4.236061e-16             1 #> 71           1               8 1.350686e-17             1 #> 72           2               8 1.678486e-17             1 #> 73           3               8 1.354915e-17             1 #> 74           4               8 1.649695e-17             1 #> 75           5               8 1.586431e-17             1 #> 76           6               8 1.696225e-17             1 #> 77           7               8 1.647631e-17             1 #> 78           8               8 1.697605e-17             1 #> 79           9               8 1.696937e-17             1 #> 80          10               8 1.692310e-17             1 #> 81           1               9 4.985272e-16             1 #> 82           2               9 6.525295e-15             1 #> 83           3               9 5.020348e-16             1 #> 84           4               9 4.917843e-15             1 #> 85           5               9 2.131786e-15             1 #> 86           6               9 7.733275e-15             1 #> 87           7               9 3.419742e-15             1 #> 88           8               9 6.263255e-16             1 #> 89           9               9 8.248401e-15             1 #> 90          10               9 7.831046e-15             1 #> 91           1              10 2.577914e-11             1 #> 92           2              10 9.294104e-10             1 #> 93           3              10 2.578335e-11             1 #> 94           4              10 6.444968e-10             1 #> 95           5              10 1.201190e-10             1 #> 96           6              10 8.278266e-10             1 #> 97           7              10 2.769907e-10             1 #> 98           8              10 3.229935e-11             1 #> 99           9              10 4.049480e-10             1 #> 100         10              10 1.281072e-09             1 #> 101          1               1 9.574463e-01             2 #> 102          2               1 1.804980e-02             2 #> 103          3               1 9.537107e-01             2 #> 104          4               1 3.681623e-02             2 #> 105          5               1 5.450179e-02             2 #> 106          6               1 2.251550e-02             2 #> 107          7               1 1.712434e-01             2 #> 108          8               1 9.352148e-01             2 #> 109          9               1 8.795580e-02             2 #> 110         10               1 9.582684e-03             2 #> 111          1               2 1.026989e-10             2 #> 112          2               2 7.549200e-09             2 #> 113          3               2 1.041363e-10             2 #> 114          4               2 7.401602e-09             2 #> 115          5               2 7.193514e-11             2 #> 116          6               2 1.397938e-09             2 #> 117          7               2 3.592645e-09             2 #> 118          8               2 1.549135e-10             2 #> 119          9               2 1.616361e-09             2 #> 120         10               2 1.336032e-09             2 #> 121          1               3 5.515828e-18             2 #> 122          2               3 1.058529e-19             2 #> 123          3               3 9.198103e-17             2 #> 124          4               3 2.370902e-19             2 #> 125          5               3 8.034467e-19             2 #> 126          6               3 1.395915e-19             2 #> 127          7               3 1.088110e-18             2 #> 128          8               3 5.421544e-18             2 #> 129          9               3 5.138669e-19             2 #> 130         10               3 5.522368e-20             2 #> 131          1               4 1.298304e-16             2 #> 132          2               4 4.587427e-15             2 #> 133          3               4 1.445628e-16             2 #> 134          4               4 6.553415e-14             2 #> 135          5               4 4.818073e-17             2 #> 136          6               4 8.779278e-16             2 #> 137          7               4 6.061285e-15             2 #> 138          8               4 1.891785e-16             2 #> 139          9               4 1.160641e-15             2 #> 140         10               4 8.121831e-16             2 #> 141          1               5 2.504260e-03             2 #> 142          2               5 5.809198e-04             2 #> 143          3               5 6.383100e-03             2 #> 144          4               5 6.277764e-04             2 #> 145          5               5 8.960011e-01             2 #> 146          6               5 6.291553e-03             2 #> 147          7               5 1.787334e-03             2 #> 148          8               5 3.374505e-03             2 #> 149          9               5 4.206674e-03             2 #> 150         10               5 5.441755e-04             2 #> 151          1               6 4.556124e-17             2 #> 152          2               6 4.971737e-16             2 #> 153          3               6 4.884035e-17             2 #> 154          4               6 5.037738e-16             2 #> 155          5               6 2.770786e-16             2 #> 156          6               6 1.295165e-14             2 #> 157          7               6 4.437693e-16             2 #> 158          8               6 7.018600e-17             2 #> 159          9               6 1.007151e-15             2 #> 160         10               6 4.702299e-16             2 #> 161          1               7 5.682681e-16             2 #> 162          2               7 2.095367e-15             2 #> 163          3               7 6.243358e-16             2 #> 164          4               7 5.703836e-15             2 #> 165          5               7 1.290852e-16             2 #> 166          6               7 7.277510e-16             2 #> 167          7               7 2.653197e-14             2 #> 168          8               7 8.259641e-16             2 #> 169          9               7 2.456474e-15             2 #> 170         10               7 6.566283e-16             2 #> 171          1               8 2.228188e-19             2 #> 172          2               8 6.486885e-21             2 #> 173          3               8 2.233415e-19             2 #> 174          4               8 1.278131e-20             2 #> 175          5               8 1.749774e-20             2 #> 176          6               8 8.263750e-21             2 #> 177          7               8 5.930104e-20             2 #> 178          8               8 3.438059e-19             2 #> 179          9               8 3.230907e-20             2 #> 180         10               8 3.500866e-21             2 #> 181          1               9 1.073045e-16             2 #> 182          2               9 3.465759e-16             2 #> 183          3               9 1.083952e-16             2 #> 184          4               9 4.015266e-16             2 #> 185          5               9 1.116924e-16             2 #> 186          6               9 6.072035e-16             2 #> 187          7               9 9.030800e-16             2 #> 188          8               9 1.654388e-16             2 #> 189          9               9 2.698546e-15             2 #> 190         10               9 2.650040e-16             2 #> 191          1              10 4.004943e-02             2 #> 192          2              10 9.813693e-01             2 #> 193          3              10 3.990620e-02             2 #> 194          4              10 9.625560e-01             2 #> 195          5              10 4.949707e-02             2 #> 196          6              10 9.711929e-01             2 #> 197          7              10 8.269692e-01             2 #> 198          8              10 6.141071e-02             2 #> 199          9              10 9.078375e-01             2 #> 200         10              10 9.898731e-01             2 ggplot2::fortify(all_flows, flows = \"destination\") #>    destination         flow configuration #> 1            1 1.000000e+01             1 #> 2            1 3.247037e+00             2 #> 3            2 9.801878e-13             1 #> 4            2 2.332746e-08             2 #> 5            3 2.488877e-17             1 #> 6            3 1.058616e-16             2 #> 7            4 1.210583e-15             1 #> 8            4 7.954536e-14             2 #> 9            5 2.572383e-16             1 #> 10           5 9.223014e-01             2 #> 11           6 1.274427e-15             1 #> 12           6 1.631541e-14             2 #> 13           7 3.017956e-15             1 #> 14           7 4.031968e-14             2 #> 15           8 1.605092e-16             1 #> 16           8 9.301070e-19             2 #> 17           9 4.243427e-14             1 #> 18           9 5.714766e-15             2 #> 19          10 4.568725e-09             1 #> 20          10 5.830662e+00             2 destination_names(all_flows) <- letters[1:10] ggplot2::fortify(all_flows, flows = \"attractiveness\", with_names = TRUE) #>    destination attractiveness configuration name #> 1            1   9.999997e+00             1    a #> 2            1   3.247041e+00             2    a #> 3            2   1.134430e-08             1    b #> 4            2   9.289324e-07             2    b #> 5            3   2.339854e-11             1    c #> 6            3   1.603382e-13             2    c #> 7            4   1.447894e-10             1    d #> 8            4   2.885433e-11             2    d #> 9            5   7.475501e-11             1    e #> 10           5   9.223014e-01             2    e #> 11           6   1.531636e-10             1    f #> 12           6   1.207977e-11             2    f #> 13           7   2.899111e-10             1    g #> 14           7   1.961416e-11             2    g #> 15           8   6.059434e-11             1    h #> 16           8   4.786517e-15             2    h #> 17           9   1.586066e-09             1    i #> 18           9   5.268357e-12             2    i #> 19          10   3.176303e-06             1    j #> 20          10   5.830657e+00             2    j"},{"path":"https://fabrice-rossi.github.io/blvim/reference/grid_attractiveness.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract all the attractivenesses from a collection of spatial interaction models — grid_attractiveness","title":"Extract all the attractivenesses from a collection of spatial interaction models — grid_attractiveness","text":"function extract attractivenesses spatial interaction models collection returns matrix row corresponds model column destination location.","code":""},{"path":"https://fabrice-rossi.github.io/blvim/reference/grid_attractiveness.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract all the attractivenesses from a collection of spatial interaction models — grid_attractiveness","text":"","code":"grid_attractiveness(sim_list, ...)"},{"path":"https://fabrice-rossi.github.io/blvim/reference/grid_attractiveness.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract all the attractivenesses from a collection of spatial interaction models — grid_attractiveness","text":"sim_list collection spatial interaction models, object class sim_list ... additional parameters attractiveness() function","code":""},{"path":"https://fabrice-rossi.github.io/blvim/reference/grid_attractiveness.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract all the attractivenesses from a collection of spatial interaction models — grid_attractiveness","text":"matrix attractivenesses destination locations","code":""},{"path":[]},{"path":"https://fabrice-rossi.github.io/blvim/reference/grid_attractiveness.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract all the attractivenesses from a collection of spatial interaction models — grid_attractiveness","text":"","code":"positions <- matrix(rnorm(15 * 2), ncol = 2) distances <- as.matrix(dist(positions)) production <- rep(1, 15) attractiveness <- rep(1, 15) all_flows <- grid_blvim(distances,   production,   c(1.1, 1.25, 1.5),   c(1, 2, 3),   attractiveness,   epsilon = 0.1 ) g_Z <- grid_attractiveness(all_flows) ## should be 9 rows (3 times 3 parameter pairs) and 15 columns (15 destination ## locations) dim(g_Z) #> [1]  9 15"},{"path":"https://fabrice-rossi.github.io/blvim/reference/grid_autoplot.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a complete ggplot for spatial interaction models in a data frame — grid_autoplot","title":"Create a complete ggplot for spatial interaction models in a data frame — grid_autoplot","text":"function combines spatial interaction model representations similar ones produced autoplot.sim() single ggplot. provides alternative graphical representation one produced autoplot.sim_df() collection spatial interaction models sim_df object.","code":""},{"path":"https://fabrice-rossi.github.io/blvim/reference/grid_autoplot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a complete ggplot for spatial interaction models in a data frame — grid_autoplot","text":"","code":"grid_autoplot(   sim_df,   key,   flows = c(\"full\", \"destination\", \"attractiveness\"),   with_names = FALSE,   with_positions = FALSE,   cut_off = 100 * .Machine$double.eps^0.5,   adjust_limits = FALSE,   with_labels = FALSE,   max_sims = 25,   fw_params = NULL,   ... )"},{"path":"https://fabrice-rossi.github.io/blvim/reference/grid_autoplot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a complete ggplot for spatial interaction models in a data frame — grid_autoplot","text":"sim_df data frame spatial interaction models, object class sim_df key wrapping variable acts identifier spatial interaction models flows \"full\" (default),  \"destination\" \"attractiveness\", see details. with_names specifies whether graphical representation includes location names (FALSE default) with_positions specifies whether graphical representation based location positions (FALSE default) cut_off cut limit inclusion graphical primitive with_positions = TRUE. full flow matrix representation, segments removed flow smaller cut . attractiveness destination representation, disks removed corresponding value cut . adjust_limits FALSE (default value), limits position based graph adjusted removing graphical primitives. eases comparison graphical representations different cut value. TRUE, limits adjusted data using standard ggplot2 behaviour. with_labels FALSE (default value) names displayed using plain texts. TRUE, names shown using labels. max_sims maximum number spatial interaction models allowed sim_df data frame fw_params parameters ggplot2::facet_wrap call (non NULL) ... additional (named) parameters passed autoplot.sim()","code":""},{"path":"https://fabrice-rossi.github.io/blvim/reference/grid_autoplot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a complete ggplot for spatial interaction models in a data frame — grid_autoplot","text":"ggplot object","code":""},{"path":"https://fabrice-rossi.github.io/blvim/reference/grid_autoplot.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a complete ggplot for spatial interaction models in a data frame — grid_autoplot","text":"rationale autoplot.sim_df() display single value spatial interaction model (SIM) sim_df data frame. contrary, function produces full graphical representation SIM. therefore limited small collection SIMs (specified max_sims parameter default 25). hood, function uses fortify.sim() shares code autoplot.sim() identical representations. simply based facet wrapping facility ggplot2. particular key parameter used wrapping variable call ggplot2::facet_wrap(). specified, function generates id variable ranges 1 number SIMs sim_df data frame. specified, evaluated context data frame used wrapping. Notice expression evaluates identical values different SIMs, drawn panel final figure, may end meaningless representations. Parameters ggplot2::facet_wrap() can set using fw_params parameter (list).","code":""},{"path":"https://fabrice-rossi.github.io/blvim/reference/grid_autoplot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a complete ggplot for spatial interaction models in a data frame — grid_autoplot","text":"","code":"positions <- matrix(rnorm(10 * 2), ncol = 2) distances <- as.matrix(dist(positions)) production <- rep(1, 10) attractiveness <- c(2, rep(1, 9)) all_flows <- grid_blvim(distances, production, seq(1.05, 1.45, by = 0.1),   seq(1, 3, by = 0.5),   attractiveness,   bipartite = FALSE,   epsilon = 0.1, iter_max = 1000,   destination_data = list(names = LETTERS[1:10], positions = positions),   origin_data = list(names = LETTERS[1:10], positions = positions) ) all_flows_df <- sim_df(all_flows) ## default display: flows as matrices grid_autoplot(all_flows_df)  ## custom wrapping variable grid_autoplot(all_flows_df, paste(alpha, \"~\", beta))  ## bar plots grid_autoplot(all_flows_df, flows = \"destination\")  grid_autoplot(all_flows_df, flows = \"attractiveness\")  ## with positions grid_autoplot(all_flows_df, flows = \"destination\", with_positions = TRUE) +   ggplot2::scale_size_continuous(range = c(0, 2))  grid_autoplot(all_flows_df, with_positions = TRUE) +   ggplot2::scale_linewidth_continuous(range = c(0, 1))"},{"path":"https://fabrice-rossi.github.io/blvim/reference/grid_blvim.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute a collection of Boltzmann–Lotka–Volterra model solutions — grid_blvim","title":"Compute a collection of Boltzmann–Lotka–Volterra model solutions — grid_blvim","text":"function computes collection flows origin locations destination locations using blvim() grid parameters. flows use costs, production constraints attractivenesses. flow computed using one pairwise combinations alpha values given alphas beta values given betas. function returns object class sim_list contains resulting flows.","code":""},{"path":"https://fabrice-rossi.github.io/blvim/reference/grid_blvim.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute a collection of Boltzmann–Lotka–Volterra model solutions — grid_blvim","text":"","code":"grid_blvim(   costs,   X,   alphas,   betas,   Z,   bipartite = TRUE,   origin_data = NULL,   destination_data = NULL,   epsilon = 0.01,   iter_max = 50000,   conv_check = 100,   precision = 1e-06,   quadratic = FALSE,   progress = FALSE )"},{"path":"https://fabrice-rossi.github.io/blvim/reference/grid_blvim.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute a collection of Boltzmann–Lotka–Volterra model solutions — grid_blvim","text":"costs cost matrix X vector production constraints alphas vector return scale parameters betas vector cost inverse scale parameters Z vector initial destination attractivenesses bipartite TRUE (default value), origin destination locations considered distinct. FALSE, single set locations plays roles. consequences functions specific latter case terminals(). origin_data NULL list additional data origin locations (see details) destination_data NULL list additional data destination locations (see details) epsilon update intensity iter_max maximal number steps BLV dynamic conv_check number iterations convergence test precision convergence threshold quadratic selects update rule, see details. progress TRUE, progress bar shown calculation (defaults FALSE)","code":""},{"path":"https://fabrice-rossi.github.io/blvim/reference/grid_blvim.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute a collection of Boltzmann–Lotka–Volterra model solutions — grid_blvim","text":"object class sim_list","code":""},{"path":"https://fabrice-rossi.github.io/blvim/reference/grid_blvim.html","id":"location-data","dir":"Reference","previous_headings":"","what":"Location data","title":"Compute a collection of Boltzmann–Lotka–Volterra model solutions — grid_blvim","text":"models package use location data beyond X Z, additional data can stored used analysing spatial interaction models.","code":""},{"path":"https://fabrice-rossi.github.io/blvim/reference/grid_blvim.html","id":"origin-and-destination-location-names","dir":"Reference","previous_headings":"","what":"Origin and destination location names","title":"Compute a collection of Boltzmann–Lotka–Volterra model solutions — grid_blvim","text":"Spatial interaction models can store names origin destination locations, using origin_names<-() destination_names<-(). Names taken default names cost matrix costs. precisely, rownames(costs) used origin location names colnames(costs) destination location names.","code":""},{"path":"https://fabrice-rossi.github.io/blvim/reference/grid_blvim.html","id":"origin-and-destination-location-positions","dir":"Reference","previous_headings":"","what":"Origin and destination location positions","title":"Compute a collection of Boltzmann–Lotka–Volterra model solutions — grid_blvim","text":"Spatial interaction models can store positions origin destination locations, using origin_positions<-() destination_positions<-().","code":""},{"path":"https://fabrice-rossi.github.io/blvim/reference/grid_blvim.html","id":"specifying-location-data","dir":"Reference","previous_headings":"","what":"Specifying location data","title":"Compute a collection of Boltzmann–Lotka–Volterra model solutions — grid_blvim","text":"addition functions mentioned , location data can specified directly using origin_data destination_data parameters. Data given list whose components interpreted excepted following ones: names used specify location names content follow restrictions documented origin_names<-() destination_names<-() positions used specify location positions content follow restrictions documented origin_positions<-() destination_positions<-()","code":""},{"path":"https://fabrice-rossi.github.io/blvim/reference/grid_blvim.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute a collection of Boltzmann–Lotka–Volterra model solutions — grid_blvim","text":"","code":"positions <- matrix(rnorm(10 * 2), ncol = 2) distances <- as.matrix(dist(positions)) production <- rep(1, 10) attractiveness <- c(2, rep(1, 9)) all_flows <- grid_blvim(distances, production, c(1.25, 1.5), c(1, 2, 3), attractiveness) all_flows #> Collection of 6 spatial interaction models with 10 origin locations and 10 #> destination locations computed on the following grid: #> • alpha: 1.25 and 1.5 #> • beta: 1, 2, and 3 length(all_flows) #> [1] 6 all_flows[[2]] #> Spatial interaction model with 10 origin locations and 10 destination locations #> • Model: Wilson's production constrained #> • Parameters: return to scale (alpha) = 1.5 and inverse cost scale (beta) = 1 #> ℹ The BLV model converged after 1700 iterations."},{"path":"https://fabrice-rossi.github.io/blvim/reference/grid_destination_flow.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract all the destination flows from a collection of spatial interaction models — grid_destination_flow","title":"Extract all the destination flows from a collection of spatial interaction models — grid_destination_flow","text":"function extract destination flows spatial interaction models collection returns matrix row corresponds model column destination location.","code":""},{"path":"https://fabrice-rossi.github.io/blvim/reference/grid_destination_flow.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract all the destination flows from a collection of spatial interaction models — grid_destination_flow","text":"","code":"grid_destination_flow(sim_list, ...)"},{"path":"https://fabrice-rossi.github.io/blvim/reference/grid_destination_flow.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract all the destination flows from a collection of spatial interaction models — grid_destination_flow","text":"sim_list collection spatial interaction models, object class sim_list ... additional parameters destination_flow() function","code":""},{"path":"https://fabrice-rossi.github.io/blvim/reference/grid_destination_flow.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract all the destination flows from a collection of spatial interaction models — grid_destination_flow","text":"matrix destination flows destination locations","code":""},{"path":[]},{"path":"https://fabrice-rossi.github.io/blvim/reference/grid_destination_flow.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract all the destination flows from a collection of spatial interaction models — grid_destination_flow","text":"","code":"positions <- matrix(rnorm(15 * 2), ncol = 2) distances <- as.matrix(dist(positions)) production <- rep(1, 15) attractiveness <- rep(1, 15) all_flows <- grid_blvim(distances,   production,   c(1.1, 1.25, 1.5),   c(1, 2, 3),   attractiveness,   epsilon = 0.1 ) g_df <- grid_destination_flow(all_flows) ## should be 9 rows (3 times 3 parameter pairs) and 15 columns (15 destination ## locations) dim(g_df) #> [1]  9 15"},{"path":"https://fabrice-rossi.github.io/blvim/reference/grid_diversity.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute diversities for a collection of spatial interaction models — grid_diversity","title":"Compute diversities for a collection of spatial interaction models — grid_diversity","text":"function computes spatial interaction model sim_list parameter diversity() corresponding destination flows returns values vector. type diversity associated parameters identical models.","code":""},{"path":"https://fabrice-rossi.github.io/blvim/reference/grid_diversity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute diversities for a collection of spatial interaction models — grid_diversity","text":"","code":"grid_diversity(   sim,   definition = c(\"shannon\", \"renyi\", \"ND\", \"RW\"),   order = 1L,   ... )"},{"path":"https://fabrice-rossi.github.io/blvim/reference/grid_diversity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute diversities for a collection of spatial interaction models — grid_diversity","text":"sim collection spatial interaction models, object class sim_list definition diversity definition \"shannon\" (default), \"renyi\" (see details) definition supported  terminals() order order Rényi entropy, used definition=\"renyi\" ... additional parameters","code":""},{"path":"https://fabrice-rossi.github.io/blvim/reference/grid_diversity.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute diversities for a collection of spatial interaction models — grid_diversity","text":"vector diversities, one per spatial interaction model","code":""},{"path":"https://fabrice-rossi.github.io/blvim/reference/grid_diversity.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute diversities for a collection of spatial interaction models — grid_diversity","text":"See diversity() definition diversities. Notice diversity() generic can applied directly sim_list objects. current function provided explicit R code unique model collection models (using function names start \"grid_\")","code":""},{"path":[]},{"path":"https://fabrice-rossi.github.io/blvim/reference/grid_diversity.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute diversities for a collection of spatial interaction models — grid_diversity","text":"","code":"positions <- matrix(rnorm(15 * 2), ncol = 2) distances <- as.matrix(dist(positions)) production <- rep(1, 15) attractiveness <- rep(1, 15) all_flows <- grid_blvim(distances,   production,   c(1.1, 1.25, 1.5),   c(1, 2, 3),   attractiveness,   bipartite = FALSE,   epsilon = 0.1 ) diversities <- grid_diversity(all_flows) diversities ## should be a length 9 vector #> [1]  1.983502  1.901702  1.000000  6.961644  4.174735  2.661917 10.363274 #> [8]  8.139205  6.331496 grid_diversity(all_flows, \"renyi\", 3) #> [1] 1.952206 1.755958 1.000000 4.878591 3.586610 2.396639 7.398064 5.726087 #> [9] 4.659825"},{"path":"https://fabrice-rossi.github.io/blvim/reference/grid_is_terminal.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract all terminal status from a collection of spatial interaction models — grid_is_terminal","title":"Extract all terminal status from a collection of spatial interaction models — grid_is_terminal","text":"function extract terminal status spatial interaction models collection returns matrix row corresponds model column destination location. value row column j TRUE destination j terminal model . function applies non bipartite models.","code":""},{"path":"https://fabrice-rossi.github.io/blvim/reference/grid_is_terminal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract all terminal status from a collection of spatial interaction models — grid_is_terminal","text":"","code":"grid_is_terminal(sim_list, definition = c(\"ND\", \"RW\"), ...)"},{"path":"https://fabrice-rossi.github.io/blvim/reference/grid_is_terminal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract all terminal status from a collection of spatial interaction models — grid_is_terminal","text":"sim_list collection non bipartite spatial interaction models, object class sim_list definition terminal definition, either \"ND\" (Nystuen & Dacey, default) \"RW\" (Rihll & Wilson), see details. ... additional parameters is_terminal() function","code":""},{"path":"https://fabrice-rossi.github.io/blvim/reference/grid_is_terminal.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract all terminal status from a collection of spatial interaction models — grid_is_terminal","text":"matrix terminal status destination locations","code":""},{"path":"https://fabrice-rossi.github.io/blvim/reference/grid_is_terminal.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract all terminal status from a collection of spatial interaction models — grid_is_terminal","text":"See terminals() definition terminal locations.","code":""},{"path":[]},{"path":"https://fabrice-rossi.github.io/blvim/reference/grid_is_terminal.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract all terminal status from a collection of spatial interaction models — grid_is_terminal","text":"","code":"positions <- matrix(rnorm(15 * 2), ncol = 2) distances <- as.matrix(dist(positions)) production <- rep(1, 15) attractiveness <- rep(1, 15) all_flows <- grid_blvim(distances,   production,   c(1.1, 1.25, 1.5),   c(1, 2, 3),   attractiveness,   bipartite = FALSE,   epsilon = 0.1 ) g_df <- grid_is_terminal(all_flows) ## should be 9 rows (3 times 3 parameter pairs) and 15 columns (15 destination ## locations) dim(g_df) #> [1]  9 15"},{"path":"https://fabrice-rossi.github.io/blvim/reference/grid_sim_converged.html","id":null,"dir":"Reference","previous_headings":"","what":"Reports the convergence statuses of a collection of spatial interaction models — grid_sim_converged","title":"Reports the convergence statuses of a collection of spatial interaction models — grid_sim_converged","text":"function reports spatial interaction model sim_list parameter convergence status, defined sim_converged().","code":""},{"path":"https://fabrice-rossi.github.io/blvim/reference/grid_sim_converged.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reports the convergence statuses of a collection of spatial interaction models — grid_sim_converged","text":"","code":"grid_sim_converged(sim, ...)"},{"path":"https://fabrice-rossi.github.io/blvim/reference/grid_sim_converged.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reports the convergence statuses of a collection of spatial interaction models — grid_sim_converged","text":"sim collection spatial interaction models, object class sim_list ... additional parameters","code":""},{"path":"https://fabrice-rossi.github.io/blvim/reference/grid_sim_converged.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reports the convergence statuses of a collection of spatial interaction models — grid_sim_converged","text":"vector convergence status, one per spatial interaction model","code":""},{"path":"https://fabrice-rossi.github.io/blvim/reference/grid_sim_converged.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Reports the convergence statuses of a collection of spatial interaction models — grid_sim_converged","text":"Notice sim_converged() generic can applied directly sim_list objects. current function provided explicit R code unique model collection models (using function names start \"grid_\")","code":""},{"path":[]},{"path":"https://fabrice-rossi.github.io/blvim/reference/grid_sim_converged.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reports the convergence statuses of a collection of spatial interaction models — grid_sim_converged","text":"","code":"positions <- matrix(rnorm(15 * 2), ncol = 2) distances <- as.matrix(dist(positions)) production <- rep(1, 15) attractiveness <- rep(1, 15) all_flows <- grid_blvim(distances,   production,   c(1.1, 1.25, 1.5),   c(1, 2, 3),   attractiveness,   bipartite = FALSE,   epsilon = 0.1,   iter_max = 750, ) grid_sim_converged(all_flows) #> [1] FALSE  TRUE  TRUE FALSE  TRUE  TRUE FALSE  TRUE  TRUE"},{"path":"https://fabrice-rossi.github.io/blvim/reference/grid_sim_iterations.html","id":null,"dir":"Reference","previous_headings":"","what":"Returns the number of iterations used to produce of a collection of spatial interaction models — grid_sim_iterations","title":"Returns the number of iterations used to produce of a collection of spatial interaction models — grid_sim_iterations","text":"function reports spatial interaction model sim_list parameter number iterations used produce (see sim_iterations())","code":""},{"path":"https://fabrice-rossi.github.io/blvim/reference/grid_sim_iterations.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Returns the number of iterations used to produce of a collection of spatial interaction models — grid_sim_iterations","text":"","code":"grid_sim_iterations(sim, ...)"},{"path":"https://fabrice-rossi.github.io/blvim/reference/grid_sim_iterations.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Returns the number of iterations used to produce of a collection of spatial interaction models — grid_sim_iterations","text":"sim collection spatial interaction models, object class sim_list ... additional parameters","code":""},{"path":"https://fabrice-rossi.github.io/blvim/reference/grid_sim_iterations.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Returns the number of iterations used to produce of a collection of spatial interaction models — grid_sim_iterations","text":"vector numbers iteration, one per spatial interaction model","code":""},{"path":"https://fabrice-rossi.github.io/blvim/reference/grid_sim_iterations.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Returns the number of iterations used to produce of a collection of spatial interaction models — grid_sim_iterations","text":"Notice sim_iterations() generic can applied directly sim_list objects. current function provided explicit R code unique model collection models (using function names start \"grid_\")","code":""},{"path":[]},{"path":"https://fabrice-rossi.github.io/blvim/reference/grid_sim_iterations.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Returns the number of iterations used to produce of a collection of spatial interaction models — grid_sim_iterations","text":"","code":"positions <- matrix(rnorm(15 * 2), ncol = 2) distances <- as.matrix(dist(positions)) production <- rep(1, 15) attractiveness <- rep(1, 15) all_flows <- grid_blvim(distances,   production,   c(1.1, 1.25, 1.5),   c(1, 2, 3),   attractiveness,   bipartite = FALSE,   epsilon = 0.1,   iter_max = 750, ) grid_sim_iterations(all_flows) #> [1] 751 400 300 751 700 300 751 751 600"},{"path":"https://fabrice-rossi.github.io/blvim/reference/grid_var_autoplot.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a complete variability plot for spatial interaction models in a data frame — grid_var_autoplot","title":"Create a complete variability plot for spatial interaction models in a data frame — grid_var_autoplot","text":"function combines spatial variability interaction model representations similar ones produced autoplot.sim_list() single ggplot. provides alternative graphical representation one produced autoplot.sim_df() grid_autoplot() collection spatial interaction models sim_df object.","code":""},{"path":"https://fabrice-rossi.github.io/blvim/reference/grid_var_autoplot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a complete variability plot for spatial interaction models in a data frame — grid_var_autoplot","text":"","code":"grid_var_autoplot(   sim_df,   key,   flows = c(\"full\", \"destination\", \"attractiveness\"),   with_names = FALSE,   with_positions = FALSE,   cut_off = 100 * .Machine$double.eps^0.5,   adjust_limits = FALSE,   with_labels = FALSE,   qmin = 0.05,   qmax = 0.95,   normalisation = c(\"origin\", \"full\", \"none\"),   fw_params = NULL,   ... )"},{"path":"https://fabrice-rossi.github.io/blvim/reference/grid_var_autoplot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a complete variability plot for spatial interaction models in a data frame — grid_var_autoplot","text":"sim_df data frame spatial interaction models, object class sim_df key wrapping variable acts group identifier spatial interaction models flows \"full\" (default),  \"destination\" \"attractiveness\", see details. with_names specifies whether graphical representation includes location names (FALSE default) with_positions specifies whether graphical representation based location positions (FALSE default) cut_off cut limit inclusion graphical primitive with_positions = TRUE. attractiveness destination representation, circles removed corresponding upper quantile value cut . adjust_limits FALSE (default value), limits position based graph adjusted removing graphical primitives. eases comparison graphical representations different cut value. TRUE, limits adjusted data using standard ggplot2 behaviour. with_labels FALSE (default value) names displayed using plain texts. TRUE, names shown using labels. qmin lower quantile, see details (default: 0.05) qmax upper quantile, see details (default: 0.95) normalisation flows=\"full\", flows can reported without normalisation (normalisation=\"none\") can normalised, either sum one origin location (normalisation=\"origin\", default value) sum one globally (normalisation=\"full\"). fw_params parameters ggplot2::facet_wrap call (non NULL) ... additional parameters passed autoplot.sim_list()","code":""},{"path":"https://fabrice-rossi.github.io/blvim/reference/grid_var_autoplot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a complete variability plot for spatial interaction models in a data frame — grid_var_autoplot","text":"ggplot object","code":""},{"path":"https://fabrice-rossi.github.io/blvim/reference/grid_var_autoplot.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a complete variability plot for spatial interaction models in a data frame — grid_var_autoplot","text":"rationale autoplot.sim_df() display single value spatial interaction model (SIM) sim_df data frame. contrary, function produces graphical representation variability partition SIMs data frame, using autoplot.sim_list() graphical engine. key parameter used partition collection SIMs. can expression can evaluated context sim_df parameter. function uses parameter wrapping variable call ggplot2::facet_wrap(). also uses way specific partition SIMs: panel final figure essentially variability graph generated autoplot.sim_list() subset SIMs sim_df match corresponding value key. Parameters ggplot2::facet_wrap() can set using fw_params parameter (list).","code":""},{"path":"https://fabrice-rossi.github.io/blvim/reference/grid_var_autoplot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a complete variability plot for spatial interaction models in a data frame — grid_var_autoplot","text":"","code":"positions <- matrix(rnorm(10 * 2), ncol = 2) distances <- as.matrix(dist(positions)) production <- rep(1, 10) attractiveness <- c(2, rep(1, 9)) all_flows <- grid_blvim(distances, production, seq(1.05, 1.45, by = 0.1),   seq(1, 3, by = 0.5),   attractiveness,   bipartite = FALSE,   epsilon = 0.1, iter_max = 1000,   destination_data = list(names = LETTERS[1:10], positions = positions),   origin_data = list(names = LETTERS[1:10], positions = positions) ) all_flows_df <- sim_df(all_flows) ## group models by iteration number grid_var_autoplot(all_flows_df, iterations)  ## or by convergence status (showing destination) grid_var_autoplot(all_flows_df, converged, flow = \"destination\")  ## using positions grid_var_autoplot(all_flows_df, iterations,   flow = \"destination\",   with_positions = TRUE )"},{"path":"https://fabrice-rossi.github.io/blvim/reference/inverse_cost.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract the inverse cost scale parameter used to compute this model — inverse_cost","title":"Extract the inverse cost scale parameter used to compute this model — inverse_cost","text":"Extract inverse cost scale parameter used compute model","code":""},{"path":"https://fabrice-rossi.github.io/blvim/reference/inverse_cost.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract the inverse cost scale parameter used to compute this model — inverse_cost","text":"","code":"inverse_cost(sim, ...)"},{"path":"https://fabrice-rossi.github.io/blvim/reference/inverse_cost.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract the inverse cost scale parameter used to compute this model — inverse_cost","text":"sim spatial interaction model inverse cost scale parameter ... additional parameters","code":""},{"path":"https://fabrice-rossi.github.io/blvim/reference/inverse_cost.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract the inverse cost scale parameter used to compute this model — inverse_cost","text":"inverse cost scale parameter","code":""},{"path":"https://fabrice-rossi.github.io/blvim/reference/inverse_cost.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract the inverse cost scale parameter used to compute this model — inverse_cost","text":"","code":"positions <- matrix(rnorm(10 * 2), ncol = 2) distances <- as.matrix(dist(positions)) production <- rep(1, 10) attractiveness <- c(2, rep(1, 9)) model <- static_blvim(distances, production, 1.5, 1, attractiveness) inverse_cost(model) ## should be 1 #> [1] 1"},{"path":"https://fabrice-rossi.github.io/blvim/reference/is_terminal.html","id":null,"dir":"Reference","previous_headings":"","what":"Report whether locations are terminal sites or not — is_terminal","title":"Report whether locations are terminal sites or not — is_terminal","text":"function returns logical vector whose length equals number locations. value position TRUE location number terminal FALSE . definition terminals, see terminals().","code":""},{"path":"https://fabrice-rossi.github.io/blvim/reference/is_terminal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Report whether locations are terminal sites or not — is_terminal","text":"","code":"is_terminal(sim, definition = c(\"ND\", \"RW\"), ...)"},{"path":"https://fabrice-rossi.github.io/blvim/reference/is_terminal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Report whether locations are terminal sites or not — is_terminal","text":"sim spatial interaction model object definition terminal definition, either \"ND\" (Nystuen & Dacey, default) \"RW\" (Rihll & Wilson), see details. ... additional parameters","code":""},{"path":"https://fabrice-rossi.github.io/blvim/reference/is_terminal.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Report whether locations are terminal sites or not — is_terminal","text":"logical vector TRUE positions locations terminals FALSE locations.","code":""},{"path":[]},{"path":"https://fabrice-rossi.github.io/blvim/reference/is_terminal.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Report whether locations are terminal sites or not — is_terminal","text":"","code":"positions <- matrix(rnorm(10 * 2), ncol = 2) distances <- as.matrix(dist(positions)) production <- rep(1, 10) attractiveness <- rep(1, 10) model <- blvim(distances, production, 1.3, 2, attractiveness, bipartite = FALSE) is_terminal(model) #>     1     2     3     4     5     6     7     8     9    10  #> FALSE  TRUE FALSE  TRUE FALSE FALSE FALSE  TRUE  TRUE  TRUE"},{"path":"https://fabrice-rossi.github.io/blvim/reference/location_names.html","id":null,"dir":"Reference","previous_headings":"","what":"Names of origin and destination locations in a spatial interaction model — location_names","title":"Names of origin and destination locations in a spatial interaction model — location_names","text":"functions provide low level access origin destination local names. recommended use origin_names() destination_names() instead location_names location_names<-.","code":""},{"path":"https://fabrice-rossi.github.io/blvim/reference/location_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Names of origin and destination locations in a spatial interaction model — location_names","text":"","code":"location_names(sim)  location_names(sim) <- value"},{"path":"https://fabrice-rossi.github.io/blvim/reference/location_names.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Names of origin and destination locations in a spatial interaction model — location_names","text":"sim spatial interaction model object (object class sim) collection spatial interaction  models (object class sim_list) value list two components (see returned value) NULL","code":""},{"path":"https://fabrice-rossi.github.io/blvim/reference/location_names.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Names of origin and destination locations in a spatial interaction model — location_names","text":"location_names NULL list two components: origin origin location names destination destination location names. location_names<-() modified sim object sim_list object.","code":""},{"path":[]},{"path":"https://fabrice-rossi.github.io/blvim/reference/location_names.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Names of origin and destination locations in a spatial interaction model — location_names","text":"","code":"positions <- matrix(rnorm(10 * 2), ncol = 2) rownames(positions) <- LETTERS[1:10] distances <- as.matrix(dist(positions)) production <- rep(1, 10) attractiveness <- rep(1, 10) ## the row/column names of the cost matrix are used for the location model <- static_blvim(distances, production, 1.5, 1, attractiveness) location_names(model) #> $origin #>  [1] \"A\" \"B\" \"C\" \"D\" \"E\" \"F\" \"G\" \"H\" \"I\" \"J\" #>  #> $destination #>  [1] \"A\" \"B\" \"C\" \"D\" \"E\" \"F\" \"G\" \"H\" \"I\" \"J\" #>  location_names(model) <- NULL location_names(model) <- list(origin = letters[1:10], destination = LETTERS[1:10]) destination_names(model) #>  [1] \"A\" \"B\" \"C\" \"D\" \"E\" \"F\" \"G\" \"H\" \"I\" \"J\" origin_names(model) #>  [1] \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\" \"j\""},{"path":"https://fabrice-rossi.github.io/blvim/reference/location_positions.html","id":null,"dir":"Reference","previous_headings":"","what":"Positions of origin and destination locations in a spatial interaction model — location_positions","title":"Positions of origin and destination locations in a spatial interaction model — location_positions","text":"functions provide low level access origin destination local positions. recommended use origin_positions() destination_positions() instead location_positions location_positions<-.","code":""},{"path":"https://fabrice-rossi.github.io/blvim/reference/location_positions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Positions of origin and destination locations in a spatial interaction model — location_positions","text":"","code":"location_positions(sim)  location_positions(sim) <- value"},{"path":"https://fabrice-rossi.github.io/blvim/reference/location_positions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Positions of origin and destination locations in a spatial interaction model — location_positions","text":"sim spatial interaction model object value list two components (see returned value) NULL","code":""},{"path":"https://fabrice-rossi.github.io/blvim/reference/location_positions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Positions of origin and destination locations in a spatial interaction model — location_positions","text":"location_positions NULL list two components: origin origin location positions destination destination location positions. location_positions<-() modified sim object.","code":""},{"path":"https://fabrice-rossi.github.io/blvim/reference/location_positions.html","id":"positions","dir":"Reference","previous_headings":"","what":"Positions","title":"Positions of origin and destination locations in a spatial interaction model — location_positions","text":"Location positions given numeric matrices 2 3 columns. first two columns assumed geographical coordinates 3rd column can used instance store altitude. Coordinates interpreted graphical representations (see autoplot.sim()). matched costs can derived complex movement models non purely geographic considerations.","code":""},{"path":[]},{"path":"https://fabrice-rossi.github.io/blvim/reference/location_positions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Positions of origin and destination locations in a spatial interaction model — location_positions","text":"","code":"positions <- matrix(rnorm(10 * 2), ncol = 2) distances <- as.matrix(dist(positions)) production <- rep(1, 10) attractiveness <- rep(1, 10) model <- static_blvim(distances, production, 1.5, 1, attractiveness) ## No positions location_positions(model) <- list(origin = positions, destination = positions) destination_positions(model) #>              [,1]       [,2] #>  [1,]  0.88862899  0.1046622 #>  [2,]  0.01321448  0.7201865 #>  [3,]  0.22533951 -0.6110461 #>  [4,] -0.72991521 -1.1069141 #>  [5,] -1.22248707  0.5348033 #>  [6,]  0.40680517  0.7360680 #>  [7,] -0.75101222 -1.2225016 #>  [8,] -0.16211654  1.0214153 #>  [9,]  0.35201013  0.4651652 #> [10,] -0.28905830  0.7904727 origin_positions(model) #>              [,1]       [,2] #>  [1,]  0.88862899  0.1046622 #>  [2,]  0.01321448  0.7201865 #>  [3,]  0.22533951 -0.6110461 #>  [4,] -0.72991521 -1.1069141 #>  [5,] -1.22248707  0.5348033 #>  [6,]  0.40680517  0.7360680 #>  [7,] -0.75101222 -1.2225016 #>  [8,] -0.16211654  1.0214153 #>  [9,]  0.35201013  0.4651652 #> [10,] -0.28905830  0.7904727"},{"path":"https://fabrice-rossi.github.io/blvim/reference/median.sim_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the ","title":"Compute the ","text":"function computes pairwise distances spatial interaction models (SIMs) x parameter, using sim_distance() specified distance parameters. returns \"median\" collection defined SIM average closest SIMs. Tie breaking uses order SIMs collection.","code":""},{"path":"https://fabrice-rossi.github.io/blvim/reference/median.sim_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the ","text":"","code":"# S3 method for class 'sim_list' median(   x,   na.rm = FALSE,   flows = c(\"full\", \"destination\", \"attractiveness\"),   method = c(\"euclidean\"),   return_distances = FALSE,   ... )"},{"path":"https://fabrice-rossi.github.io/blvim/reference/median.sim_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the ","text":"x collection spatial interaction models, object class sim_list na.rm used flows \"full\" (default),  \"destination\" \"attractiveness\", see details. method distance measure used. Currently \"euclidean\" supported return_distances distances computed find median returned distances attribute resulting object? (defaults FALSE) ... additional parameters (used currently)","code":""},{"path":"https://fabrice-rossi.github.io/blvim/reference/median.sim_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the ","text":"spatial interaction model, object class sim additional attributes","code":""},{"path":"https://fabrice-rossi.github.io/blvim/reference/median.sim_list.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute the ","text":"distance calculation can slow large collection SIMs, distance object can returned distances attribute median SIM setting return_distances parameter TRUE. addition, returned SIM always two attributes: index gives index mode original sim_list distortion gives mean distances median SIM SIMs","code":""},{"path":"https://fabrice-rossi.github.io/blvim/reference/median.sim_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute the ","text":"","code":"positions <- matrix(rnorm(15 * 2), ncol = 2) distances <- as.matrix(dist(positions)) production <- rep(1, 15) attractiveness <- rep(1, 15) all_flows <- grid_blvim(distances,   production,   c(1.1, 1.25, 1.5),   c(1, 2, 3),   attractiveness,   epsilon = 0.1 ) all_flows_median <- median(all_flows) attr(all_flows_median, \"index\") #> [1] 5 attr(all_flows_median, \"distortion\") #> [1] 1.417701 median(all_flows, flows = \"destination\") #> Spatial interaction model with 15 origin locations and 15 destination locations #> • Model: Wilson's production constrained #> • Parameters: return to scale (alpha) = 1.25 and inverse cost scale (beta) = 2 #> ℹ The BLV model converged after 900 iterations. median(all_flows, flows = \"attractiveness\") #> Spatial interaction model with 15 origin locations and 15 destination locations #> • Model: Wilson's production constrained #> • Parameters: return to scale (alpha) = 1.25 and inverse cost scale (beta) = 2 #> ℹ The BLV model converged after 900 iterations."},{"path":"https://fabrice-rossi.github.io/blvim/reference/nd_graph.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the Nystuen and Dacey graph for a spatial interaction model — nd_graph","title":"Compute the Nystuen and Dacey graph for a spatial interaction model — nd_graph","text":"function computes important flows spatial interaction model according approach outlined J. D. Nystuen M. F. Dacey (Nystuen & Dacey, 1961. work, nodal flow largest flow sent non terminal location (based definition terminals recalled terminals()). nodal structure collection flows. form oriented graph interesting properties. particular weakly connected component contains single terminal location can seen dominant location component. Notice nodal flows based terminals, function applies non bipartite setting.","code":""},{"path":"https://fabrice-rossi.github.io/blvim/reference/nd_graph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the Nystuen and Dacey graph for a spatial interaction model — nd_graph","text":"","code":"nd_graph(sim, definition = c(\"ND\", \"RW\"), ...)"},{"path":"https://fabrice-rossi.github.io/blvim/reference/nd_graph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the Nystuen and Dacey graph for a spatial interaction model — nd_graph","text":"sim spatial interaction model object definition terminal definition, either \"ND\" (Nystuen & Dacey, default) \"RW\" (Rihll & Wilson), see details. ... additional parameters","code":""},{"path":"https://fabrice-rossi.github.io/blvim/reference/nd_graph.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the Nystuen and Dacey graph for a spatial interaction model — nd_graph","text":"data frame describing Nystuen Dacey graph .k.. nodal structure spatial interaction model","code":""},{"path":"https://fabrice-rossi.github.io/blvim/reference/nd_graph.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute the Nystuen and Dacey graph for a spatial interaction model — nd_graph","text":"practice, function computes first terminals non terminals according either Nystuen & Dacey (1961) Rihll Wilson (1991). extracts nodal flows. result analysis returned data frame three columns: : index non terminal origin location : index destination location nodal flow flow: value nodal flow important aspect node structure contain isolated terminals. location terminal never receiver nodal flow appear collection nodal flows. constitutes trivial connected component .","code":""},{"path":"https://fabrice-rossi.github.io/blvim/reference/nd_graph.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Compute the Nystuen and Dacey graph for a spatial interaction model — nd_graph","text":"Nystuen, J.D. Dacey, M.F. (1961), \"graph theory interpretation nodal regions\", Papers Proceedings Regional Science Association 7: 29–42. doi:10.1007/bf01969070 Rihll, T., Wilson, . (1991), \"Modelling settlement structures ancient Greece: new approaches polis\", City Country Ancient World, Vol. 3, Edited J. Rich . Wallace-Hadrill, 58–95. London: Routledge.","code":""},{"path":[]},{"path":"https://fabrice-rossi.github.io/blvim/reference/nd_graph.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute the Nystuen and Dacey graph for a spatial interaction model — nd_graph","text":"","code":"positions <- matrix(rnorm(10 * 2), ncol = 2) distances <- as.matrix(dist(positions)) production <- rep(1, 10) attractiveness <- rep(1, 10) model <- blvim(distances, production, 1.3, 2, attractiveness, bipartite = FALSE) nd_graph(model) #>    from to      flow #> 2     2  4 0.9942171 #> 3     3  4 0.9648898 #> 6     6  4 0.9922923 #> 8     8  4 0.9793537 #> 9     9  4 0.9672267 #> 10   10  4 0.9838683 nd_graph(model, \"RW\") #>    from to      flow #> 2     2  4 0.9942171 #> 3     3  4 0.9648898 #> 6     6  4 0.9922923 #> 8     8  4 0.9793537 #> 9     9  4 0.9672267 #> 10   10  4 0.9838683"},{"path":"https://fabrice-rossi.github.io/blvim/reference/origin_names.html","id":null,"dir":"Reference","previous_headings":"","what":"Names of origin locations in a spatial interaction model — origin_names","title":"Names of origin locations in a spatial interaction model — origin_names","text":"Functions get set names origin locations spatial interaction model (collection spatial interaction models).","code":""},{"path":"https://fabrice-rossi.github.io/blvim/reference/origin_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Names of origin locations in a spatial interaction model — origin_names","text":"","code":"origin_names(sim)  origin_names(sim) <- value"},{"path":"https://fabrice-rossi.github.io/blvim/reference/origin_names.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Names of origin locations in a spatial interaction model — origin_names","text":"sim spatial interaction model object (object class sim) collection spatial interaction  models (object class sim_list) value character vector length equal number origin locations, NULL (vectors adapted length converted character vectors)","code":""},{"path":"https://fabrice-rossi.github.io/blvim/reference/origin_names.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Names of origin locations in a spatial interaction model — origin_names","text":"origin_names NULL character vector one name per origin locations model. origin_names<- modified sim object sim_list object.","code":""},{"path":[]},{"path":"https://fabrice-rossi.github.io/blvim/reference/origin_names.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Names of origin locations in a spatial interaction model — origin_names","text":"","code":"positions <- matrix(rnorm(10 * 2), ncol = 2) rownames(positions) <- LETTERS[1:10] distances <- as.matrix(dist(positions)) production <- rep(1, 10) attractiveness <- rep(1, 10) ## the row/column names of the cost matrix are used for the location model <- static_blvim(distances, production, 1.5, 1, attractiveness) origin_names(model) #>  [1] \"A\" \"B\" \"C\" \"D\" \"E\" \"F\" \"G\" \"H\" \"I\" \"J\" origin_names(model) <- letters[11:20] origin_names(model) #>  [1] \"k\" \"l\" \"m\" \"n\" \"o\" \"p\" \"q\" \"r\" \"s\" \"t\""},{"path":"https://fabrice-rossi.github.io/blvim/reference/origin_positions.html","id":null,"dir":"Reference","previous_headings":"","what":"Positions of origin locations in a spatial interaction model — origin_positions","title":"Positions of origin locations in a spatial interaction model — origin_positions","text":"Functions get set positions origin locations spatial interaction model.","code":""},{"path":"https://fabrice-rossi.github.io/blvim/reference/origin_positions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Positions of origin locations in a spatial interaction model — origin_positions","text":"","code":"origin_positions(sim)  origin_positions(sim) <- value"},{"path":"https://fabrice-rossi.github.io/blvim/reference/origin_positions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Positions of origin locations in a spatial interaction model — origin_positions","text":"sim spatial interaction model object value matrix many rows  number origin locations 2 3 columns, NULL","code":""},{"path":"https://fabrice-rossi.github.io/blvim/reference/origin_positions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Positions of origin locations in a spatial interaction model — origin_positions","text":"origin_positions NULL coordinate matrix origin locations. origin_positions<- modified sim object","code":""},{"path":"https://fabrice-rossi.github.io/blvim/reference/origin_positions.html","id":"positions","dir":"Reference","previous_headings":"","what":"Positions","title":"Positions of origin locations in a spatial interaction model — origin_positions","text":"Location positions given numeric matrices 2 3 columns. first two columns assumed geographical coordinates 3rd column can used instance store altitude. Coordinates interpreted graphical representations (see autoplot.sim()). matched costs can derived complex movement models non purely geographic considerations.","code":""},{"path":[]},{"path":"https://fabrice-rossi.github.io/blvim/reference/origin_positions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Positions of origin locations in a spatial interaction model — origin_positions","text":"","code":"positions <- matrix(rnorm(10 * 2), ncol = 2) distances <- as.matrix(dist(positions)) production <- rep(1, 10) attractiveness <- rep(1, 10) model <- static_blvim(distances, production, 1.5, 1, attractiveness) origin_positions(model) <- positions origin_positions(model) #>              [,1]        [,2] #>  [1,] -1.07806726  0.41626080 #>  [2,] -1.14356572  0.11402961 #>  [3,] -0.52964368  0.06391875 #>  [4,] -0.68127316 -0.91933224 #>  [5,] -0.20244756  0.90133529 #>  [6,]  1.68449572 -0.79772830 #>  [7,] -1.03377324  0.66822120 #>  [8,] -0.15597667  0.15521430 #>  [9,] -0.04640064  0.12868809 #> [10,] -0.95362873 -1.53306545"},{"path":"https://fabrice-rossi.github.io/blvim/reference/production.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract the production constraints from a spatial interaction model object — production","title":"Extract the production constraints from a spatial interaction model object — production","text":"Extract production constraints spatial interaction model object","code":""},{"path":"https://fabrice-rossi.github.io/blvim/reference/production.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract the production constraints from a spatial interaction model object — production","text":"","code":"production(sim, ...)"},{"path":"https://fabrice-rossi.github.io/blvim/reference/production.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract the production constraints from a spatial interaction model object — production","text":"sim spatial interaction model object ... additional parameters","code":""},{"path":"https://fabrice-rossi.github.io/blvim/reference/production.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract the production constraints from a spatial interaction model object — production","text":"vector production constraints origin locations","code":""},{"path":"https://fabrice-rossi.github.io/blvim/reference/production.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract the production constraints from a spatial interaction model object — production","text":"","code":"positions <- matrix(rnorm(10 * 2), ncol = 2) distances <- as.matrix(dist(positions)) production <- rep(1, 10) attractiveness <- c(2, rep(1, 9)) model <- static_blvim(distances, production, 1.5, 1, attractiveness) all.equal(production(model), production) #> [1] \"names for target but not for current\""},{"path":"https://fabrice-rossi.github.io/blvim/reference/return_to_scale.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract the return to scale parameter used to compute this model — return_to_scale","title":"Extract the return to scale parameter used to compute this model — return_to_scale","text":"Extract return scale parameter used compute model","code":""},{"path":"https://fabrice-rossi.github.io/blvim/reference/return_to_scale.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract the return to scale parameter used to compute this model — return_to_scale","text":"","code":"return_to_scale(sim, ...)"},{"path":"https://fabrice-rossi.github.io/blvim/reference/return_to_scale.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract the return to scale parameter used to compute this model — return_to_scale","text":"sim spatial interaction model return scale parameter ... additional parameters","code":""},{"path":"https://fabrice-rossi.github.io/blvim/reference/return_to_scale.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract the return to scale parameter used to compute this model — return_to_scale","text":"return scale parameter","code":""},{"path":"https://fabrice-rossi.github.io/blvim/reference/return_to_scale.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract the return to scale parameter used to compute this model — return_to_scale","text":"","code":"positions <- matrix(rnorm(10 * 2), ncol = 2) distances <- as.matrix(dist(positions)) production <- rep(1, 10) attractiveness <- c(2, rep(1, 9)) model <- static_blvim(distances, production, 1.5, 1, attractiveness) return_to_scale(model) ## should be 1.5 #> [1] 1.5"},{"path":"https://fabrice-rossi.github.io/blvim/reference/sim_column.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the collection of spatial interaction models from a sim data frame — sim_column","title":"Get the collection of spatial interaction models from a sim data frame — sim_column","text":"Get collection spatial interaction models sim data frame","code":""},{"path":"https://fabrice-rossi.github.io/blvim/reference/sim_column.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the collection of spatial interaction models from a sim data frame — sim_column","text":"","code":"sim_column(sim_df)"},{"path":"https://fabrice-rossi.github.io/blvim/reference/sim_column.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the collection of spatial interaction models from a sim data frame — sim_column","text":"sim_df data frame spatial interaction models, object class sim_df","code":""},{"path":"https://fabrice-rossi.github.io/blvim/reference/sim_column.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the collection of spatial interaction models from a sim data frame — sim_column","text":"collection spatial interaction models sim_df object, sim_list object","code":""},{"path":"https://fabrice-rossi.github.io/blvim/reference/sim_column.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the collection of spatial interaction models from a sim data frame — sim_column","text":"","code":"positions <- matrix(rnorm(10 * 2), ncol = 2) distances <- as.matrix(dist(positions)) production <- rep(1, 10) attractiveness <- c(2, rep(1, 9)) all_flows <- grid_blvim(distances, production, c(1.25, 1.5), c(1, 2, 3), attractiveness) all_flows_df <- sim_df(all_flows) sim_column(all_flows_df) #> Collection of 6 spatial interaction models with 10 origin locations and 10 #> destination locations computed on the following grid: #> • alpha: 1.25 and 1.5 #> • beta: 1, 2, and 3"},{"path":"https://fabrice-rossi.github.io/blvim/reference/sim_converged.html","id":null,"dir":"Reference","previous_headings":"","what":"Reports whether the spatial interaction model construction converged — sim_converged","title":"Reports whether the spatial interaction model construction converged — sim_converged","text":"spatial interaction models result iterative calculation, see instance blvim(). calculation may interrupted convergence. present function returns TRUE calculation converged, FALSE case NA spatial interaction model result iterative calculation. function applies also collection spatial interaction models represented sim_list.","code":""},{"path":"https://fabrice-rossi.github.io/blvim/reference/sim_converged.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reports whether the spatial interaction model construction converged — sim_converged","text":"","code":"sim_converged(sim, ...)"},{"path":"https://fabrice-rossi.github.io/blvim/reference/sim_converged.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reports whether the spatial interaction model construction converged — sim_converged","text":"sim spatial interaction model object (object class sim) collection spatial interaction  models (object class sim_list) ... additional parameters","code":""},{"path":"https://fabrice-rossi.github.io/blvim/reference/sim_converged.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reports whether the spatial interaction model construction converged — sim_converged","text":"TRUE, FALSE NA, described . case sim_list function returns logical vector one value per model.","code":""},{"path":[]},{"path":"https://fabrice-rossi.github.io/blvim/reference/sim_converged.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reports whether the spatial interaction model construction converged — sim_converged","text":"","code":"positions <- matrix(rnorm(10 * 2), ncol = 2) distances <- as.matrix(dist(positions)) production <- rep(1, 10) attractiveness <- c(2, rep(1, 9)) model <- static_blvim(distances, production, 1.5, 1, attractiveness) sim_converged(model) ## must be NA #> [1] NA"},{"path":"https://fabrice-rossi.github.io/blvim/reference/sim_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a spatial interaction models data frame from a collection of interaction models — sim_df","title":"Create a spatial interaction models data frame from a collection of interaction models — sim_df","text":"function build data frame collection spatial interaction models. data frame list column sim type sim_list stores collection models classical columns contain characteristics models. name list column can set something else sim (name used default columns). See details default columns.","code":""},{"path":"https://fabrice-rossi.github.io/blvim/reference/sim_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a spatial interaction models data frame from a collection of interaction models — sim_df","text":"","code":"sim_df(x, sim_column = \"sim\")"},{"path":"https://fabrice-rossi.github.io/blvim/reference/sim_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a spatial interaction models data frame from a collection of interaction models — sim_df","text":"x collection spatial interaction models, object class sim_list sim_column name sim_list column (default \"sim\")","code":""},{"path":"https://fabrice-rossi.github.io/blvim/reference/sim_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a spatial interaction models data frame from a collection of interaction models — sim_df","text":"data frame representation spatial interaction model collection classes sim_df data.frame","code":""},{"path":"https://fabrice-rossi.github.io/blvim/reference/sim_df.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a spatial interaction models data frame from a collection of interaction models — sim_df","text":"data frame one row per spatial interaction model following columns: sim (default name): last column contains models alpha: return scale parameter used build model beta: cost inverse scale parameter used build model diversity: model default diversity() (Shannon's diversity) iterations: number iterations used produce model (1 static model) converged: TRUE iterative calculation model converged (models produced blvim() related approaches), FALSE convergence NA static models","code":""},{"path":"https://fabrice-rossi.github.io/blvim/reference/sim_df.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a spatial interaction models data frame from a collection of interaction models — sim_df","text":"","code":"positions <- matrix(rnorm(10 * 2), ncol = 2) distances <- as.matrix(dist(positions)) production <- rep(1, 10) attractiveness <- c(2, rep(1, 9)) all_flows <- grid_blvim(distances, production, c(1.25, 1.5), c(1, 2, 3), attractiveness) all_flows_df <- sim_df(all_flows) all_flows_df$converged #> [1] TRUE TRUE TRUE TRUE TRUE TRUE"},{"path":"https://fabrice-rossi.github.io/blvim/reference/sim_distance.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute all pairwise distances between the spatial interaction models in a collection — sim_distance","title":"Compute all pairwise distances between the spatial interaction models in a collection — sim_distance","text":"function extracts spatial interaction model collection vector representation derived flow matrix (see details). vector used compute distances models.","code":""},{"path":"https://fabrice-rossi.github.io/blvim/reference/sim_distance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute all pairwise distances between the spatial interaction models in a collection — sim_distance","text":"","code":"sim_distance(   sim_list,   flows = c(\"full\", \"destination\", \"attractiveness\"),   method = c(\"euclidean\"),   ... )"},{"path":"https://fabrice-rossi.github.io/blvim/reference/sim_distance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute all pairwise distances between the spatial interaction models in a collection — sim_distance","text":"sim_list collection spatial interaction models, object class sim_list flows \"full\" (default),  \"destination\" \"attractiveness\", see details. method distance measure used. Currently \"euclidean\" supported ... additional parameters (used currently)","code":""},{"path":"https://fabrice-rossi.github.io/blvim/reference/sim_distance.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute all pairwise distances between the spatial interaction models in a collection — sim_distance","text":"object class \"dist\"","code":""},{"path":"https://fabrice-rossi.github.io/blvim/reference/sim_distance.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute all pairwise distances between the spatial interaction models in a collection — sim_distance","text":"vector representation selected using flows parameters. Possible values \"full\" (default value): representation obtained considering matrix flows() vector (standard .vector() function); \"destination\": representation destination_flow() vector associated spatial interaction model; \"attractiveness\": representation attractiveness() vector associated spatial interaction model.","code":""},{"path":[]},{"path":"https://fabrice-rossi.github.io/blvim/reference/sim_distance.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute all pairwise distances between the spatial interaction models in a collection — sim_distance","text":"","code":"positions <- matrix(rnorm(15 * 2), ncol = 2) distances <- as.matrix(dist(positions)) production <- rep(1, 15) attractiveness <- rep(1, 15) all_flows <- grid_blvim(distances,   production,   c(1.1, 1.25, 1.5),   c(1, 2, 3),   attractiveness,   epsilon = 0.1 ) flows_distances <- sim_distance(all_flows) inflows_distances <- sim_distance(all_flows, \"destination\")"},{"path":"https://fabrice-rossi.github.io/blvim/reference/sim_is_bipartite.html","id":null,"dir":"Reference","previous_headings":"","what":"Reports whether the spatial interaction model is bipartite — sim_is_bipartite","title":"Reports whether the spatial interaction model is bipartite — sim_is_bipartite","text":"function returns TRUE spatial interaction model (SIM) bipartite, origin locations distinct destination locations (least analysis point view). function return FALSE SIM uses locations origin destination.","code":""},{"path":"https://fabrice-rossi.github.io/blvim/reference/sim_is_bipartite.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reports whether the spatial interaction model is bipartite — sim_is_bipartite","text":"","code":"sim_is_bipartite(sim)"},{"path":"https://fabrice-rossi.github.io/blvim/reference/sim_is_bipartite.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reports whether the spatial interaction model is bipartite — sim_is_bipartite","text":"sim spatial interaction model object","code":""},{"path":"https://fabrice-rossi.github.io/blvim/reference/sim_is_bipartite.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reports whether the spatial interaction model is bipartite — sim_is_bipartite","text":"TRUE spatial interaction model bipartite, FALSE .","code":""},{"path":"https://fabrice-rossi.github.io/blvim/reference/sim_is_bipartite.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reports whether the spatial interaction model is bipartite — sim_is_bipartite","text":"","code":"positions <- matrix(rnorm(10 * 2), ncol = 2) distances <- as.matrix(dist(positions)) production <- rep(1, 10) attractiveness <- c(2, rep(1, 9)) model <- static_blvim(distances, production, 1.5, 1, attractiveness) ## returns TRUE despite the use of a single set of positions sim_is_bipartite(model) #> [1] TRUE ## now we are clear about the non bipartite nature of the model model <- static_blvim(distances, production, 1.5, 1, attractiveness, bipartite = FALSE) sim_is_bipartite(model) #> [1] FALSE"},{"path":"https://fabrice-rossi.github.io/blvim/reference/sim_iterations.html","id":null,"dir":"Reference","previous_headings":"","what":"Returns the number of iterations used to produce this spatial interaction model — sim_iterations","title":"Returns the number of iterations used to produce this spatial interaction model — sim_iterations","text":"Returns number iterations used produce spatial interaction model","code":""},{"path":"https://fabrice-rossi.github.io/blvim/reference/sim_iterations.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Returns the number of iterations used to produce this spatial interaction model — sim_iterations","text":"","code":"sim_iterations(sim, ...)"},{"path":"https://fabrice-rossi.github.io/blvim/reference/sim_iterations.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Returns the number of iterations used to produce this spatial interaction model — sim_iterations","text":"sim spatial interaction model object (object class sim) collection spatial interaction  models (object class sim_list) ... additional parameters","code":""},{"path":"https://fabrice-rossi.github.io/blvim/reference/sim_iterations.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Returns the number of iterations used to produce this spatial interaction model — sim_iterations","text":"number iterations may one spatial interaction model obtained using static model (see static_blvim()). case sim_list function returns vector iteration number per model.","code":""},{"path":[]},{"path":"https://fabrice-rossi.github.io/blvim/reference/sim_iterations.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Returns the number of iterations used to produce this spatial interaction model — sim_iterations","text":"","code":"positions <- matrix(rnorm(10 * 2), ncol = 2) distances <- as.matrix(dist(positions)) production <- rep(1, 10) attractiveness <- c(2, rep(1, 9)) model <- static_blvim(distances, production, 1.5, 1, attractiveness) sim_iterations(model) ## must be one #> [1] 1"},{"path":"https://fabrice-rossi.github.io/blvim/reference/sim_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a sim_list object from a list of spatial interaction objects — sim_list","title":"Create a sim_list object from a list of spatial interaction objects — sim_list","text":"collection sim objects represented sim_list object assumed homogeneous, correspond fix set origin destination locations, associated fixed cost matrix.","code":""},{"path":"https://fabrice-rossi.github.io/blvim/reference/sim_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a sim_list object from a list of spatial interaction objects — sim_list","text":"","code":"sim_list(sims, validate = TRUE)"},{"path":"https://fabrice-rossi.github.io/blvim/reference/sim_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a sim_list object from a list of spatial interaction objects — sim_list","text":"sims list homogeneous spatial interaction objects validate function validate homogeneity list spatial interaction objects (defaults TRUE)","code":""},{"path":"https://fabrice-rossi.github.io/blvim/reference/sim_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a sim_list object from a list of spatial interaction objects — sim_list","text":"sim_list object","code":""},{"path":"https://fabrice-rossi.github.io/blvim/reference/sim_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a sim_list object from a list of spatial interaction objects — sim_list","text":"","code":"positions <- matrix(rnorm(10 * 2), ncol = 2) distances <- as.matrix(dist(positions)) production <- rep(1, 10) attractiveness <- c(2, rep(1, 9)) flows_1 <- blvim(distances, production, 1.5, 1, attractiveness) flows_2 <- blvim(distances, production, 1.25, 2, attractiveness) all_flows <- sim_list(list(flows_1, flows_2))"},{"path":"https://fabrice-rossi.github.io/blvim/reference/static_blvim.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute flows between origin and destination locations — static_blvim","title":"Compute flows between origin and destination locations — static_blvim","text":"function computes flows origin locations destination locations according production constrained entropy maximising model proposed . Wilson.","code":""},{"path":"https://fabrice-rossi.github.io/blvim/reference/static_blvim.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute flows between origin and destination locations — static_blvim","text":"","code":"static_blvim(   costs,   X,   alpha,   beta,   Z,   bipartite = TRUE,   origin_data = NULL,   destination_data = NULL )"},{"path":"https://fabrice-rossi.github.io/blvim/reference/static_blvim.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute flows between origin and destination locations — static_blvim","text":"costs cost matrix X vector production constraints alpha return scale parameter beta inverse cost scale parameter Z vector destination attractivenesses bipartite TRUE (default value), origin destination locations considered distinct. FALSE, single set locations plays roles. consequences functions specific latter case terminals(). origin_data NULL list additional data origin locations (see details) destination_data NULL list additional data destination locations (see details)","code":""},{"path":"https://fabrice-rossi.github.io/blvim/reference/static_blvim.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute flows between origin and destination locations — static_blvim","text":"object class sim (sim_wpc) spatial interaction model contains matrix flows origin locations destination locations (see \\((Y_{ij})_{1\\leq \\leq n, 1\\leq j\\leq p}\\) ) attractivenesses destination locations.","code":""},{"path":"https://fabrice-rossi.github.io/blvim/reference/static_blvim.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute flows between origin and destination locations — static_blvim","text":"model computes flows using following parameters: costs (\\(c\\)) \\(n\\times p\\) matrix whose \\((,j )\\) entry cost \"unitary\" flow origin location \\(\\) destination location \\(j\\) X (\\(X\\)) vector size \\(n\\) containing non negative production constraints \\(n\\) origin locations alpha (\\(\\alpha\\)) return scale parameter enhance (reduce smaller 1) attractivenesses destination locations larger 1 beta (\\(\\beta\\)) inverse cost scale parameter, .e., costs multiplied beta model Z (\\(Z\\)) vector size \\(p\\) containing positive attractivenesses \\(p\\) destination locations According Wilson's model, flow origin location \\(\\) destination location \\(j\\), \\(Y_{ij}\\), given $$Y_{ij}=\\frac{X_iZ_j^{\\alpha}\\exp(-\\beta c_{ij})}{\\sum_{k=1}^pZ_k^{\\alpha}\\exp(-\\beta c_{ik})}.$$ model production constrained $$\\forall ,\\quad X_i=\\sum_{j=1}^{p}Y_{ij},$$ origin location \\(\\) sends total flow exactly \\(X_i\\).","code":""},{"path":"https://fabrice-rossi.github.io/blvim/reference/static_blvim.html","id":"location-data","dir":"Reference","previous_headings":"","what":"Location data","title":"Compute flows between origin and destination locations — static_blvim","text":"models package use location data beyond X Z, additional data can stored used analysing spatial interaction models.","code":""},{"path":"https://fabrice-rossi.github.io/blvim/reference/static_blvim.html","id":"origin-and-destination-location-names","dir":"Reference","previous_headings":"","what":"Origin and destination location names","title":"Compute flows between origin and destination locations — static_blvim","text":"Spatial interaction models can store names origin destination locations, using origin_names<-() destination_names<-(). Names taken default names cost matrix costs. precisely, rownames(costs) used origin location names colnames(costs) destination location names.","code":""},{"path":"https://fabrice-rossi.github.io/blvim/reference/static_blvim.html","id":"origin-and-destination-location-positions","dir":"Reference","previous_headings":"","what":"Origin and destination location positions","title":"Compute flows between origin and destination locations — static_blvim","text":"Spatial interaction models can store positions origin destination locations, using origin_positions<-() destination_positions<-().","code":""},{"path":"https://fabrice-rossi.github.io/blvim/reference/static_blvim.html","id":"specifying-location-data","dir":"Reference","previous_headings":"","what":"Specifying location data","title":"Compute flows between origin and destination locations — static_blvim","text":"addition functions mentioned , location data can specified directly using origin_data destination_data parameters. Data given list whose components interpreted excepted following ones: names used specify location names content follow restrictions documented origin_names<-() destination_names<-() positions used specify location positions content follow restrictions documented origin_positions<-() destination_positions<-()","code":""},{"path":"https://fabrice-rossi.github.io/blvim/reference/static_blvim.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Compute flows between origin and destination locations — static_blvim","text":"Wilson, . (1971), \"family spatial interaction models, associated developments\", Environment Planning : Economy Space, 3(1), 1-32 doi:10.1068/a030001","code":""},{"path":[]},{"path":"https://fabrice-rossi.github.io/blvim/reference/static_blvim.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute flows between origin and destination locations — static_blvim","text":"","code":"positions <- matrix(rnorm(10 * 2), ncol = 2) distances <- as.matrix(dist(positions)) production <- rep(1, 10) attractiveness <- c(2, rep(1, 9)) model <- static_blvim(distances, production, 1.5, 1, attractiveness,   origin_data = list(names = letters[1:10], positions = positions),   destination_data = list(names = letters[1:10], positions = positions) ) model #> Spatial interaction model with 10 origin locations and 10 destination locations #> • Model: Wilson's production constrained #> • Parameters: return to scale (alpha) = 1.5 and inverse cost scale (beta) = 1 location_names(model) #> $origin #>  [1] \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\" \"j\" #>  #> $destination #>  [1] \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\" \"j\" #>  location_positions(model) #> $origin #>              [,1]       [,2] #>  [1,]  0.24594946  1.1645199 #>  [2,]  0.27205914  0.3376279 #>  [3,] -0.99245858 -1.0545187 #>  [4,] -0.02757795  0.6607691 #>  [5,]  2.22284516 -0.8234090 #>  [6,]  0.15550390  0.4370337 #>  [7,] -0.86911632  0.3723881 #>  [8,] -1.17448945 -1.6467491 #>  [9,] -1.75967731 -1.9235523 #> [10,]  0.05836159  0.3808330 #>  #> $destination #>              [,1]       [,2] #>  [1,]  0.24594946  1.1645199 #>  [2,]  0.27205914  0.3376279 #>  [3,] -0.99245858 -1.0545187 #>  [4,] -0.02757795  0.6607691 #>  [5,]  2.22284516 -0.8234090 #>  [6,]  0.15550390  0.4370337 #>  [7,] -0.86911632  0.3723881 #>  [8,] -1.17448945 -1.6467491 #>  [9,] -1.75967731 -1.9235523 #> [10,]  0.05836159  0.3808330 #>"},{"path":"https://fabrice-rossi.github.io/blvim/reference/terminals.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute terminals for a spatial interaction model — terminals","title":"Compute terminals for a spatial interaction model — terminals","text":"function identifies terminals locations underlying given spatial interaction model. Terminals locally dominating locations essentially send less locations receive (see details formal definitions). compare incoming flows outgoing flows, terminal computation restricted interaction models origin destination locations identical, .e. models bipartite.","code":""},{"path":"https://fabrice-rossi.github.io/blvim/reference/terminals.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute terminals for a spatial interaction model — terminals","text":"","code":"terminals(sim, definition = c(\"ND\", \"RW\"), ...)"},{"path":"https://fabrice-rossi.github.io/blvim/reference/terminals.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute terminals for a spatial interaction model — terminals","text":"sim spatial interaction model object definition terminal definition, either \"ND\" (Nystuen & Dacey, default) \"RW\" (Rihll & Wilson), see details. ... additional parameters","code":""},{"path":"https://fabrice-rossi.github.io/blvim/reference/terminals.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute terminals for a spatial interaction model — terminals","text":"vector containing indexes terminals identified flow matrix interaction model.","code":""},{"path":"https://fabrice-rossi.github.io/blvim/reference/terminals.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute terminals for a spatial interaction model — terminals","text":"notion terminal used function based seminal work J. D. Nystuen M. F. Dacey (Nystuen & Dacey, 1961), well follow variation Rihll & Wislon (1987 1991). assume given square flow matrix \\((Y_{ij})_{1\\leq \\leq n, 1\\leq j\\leq n}\\). incoming flow location \\(j\\) given $$D_j=\\sum_{j=}^{p}Y_{ij},$$ used measure importance location. Nystuen & Dacey (1961), location \\(j\\) \"terminal point\" (\"central city\") $$D_j \\geq D_{m(j)},$$ \\(m(j)\\) $$\\forall l,\\quad Y_{jl}\\leq Y_{jm(j)}.$$ words, \\(j\\) terminal location \\(m(j)\\) sends largest flow less important \\(j\\) , terms incoming flows. definition used function definition \"ND\". Rihll & Wilson (1987) use modified version definition described details Rihll Wilson (1991). relaxed version, location \\(j\\) terminal $$\\forall ,\\quad D_j \\geq Y_{ij}.$$ words, \\(j\\) terminal receives flows sending location. easy see Nystuen & Dacey terminal Rihll & Wilson terminal, reverse false general. function use Rihll & Wilson definition definition \"RW\"","code":""},{"path":"https://fabrice-rossi.github.io/blvim/reference/terminals.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Compute terminals for a spatial interaction model — terminals","text":"Nystuen, J.D. Dacey, M.F. (1961), \"graph theory interpretation nodal regions\", Papers Proceedings Regional Science Association 7: 29–42. doi:10.1007/bf01969070 Rihll, T.E., Wilson, .G. (1987). \"Spatial interaction structural models historical analysis: possibilities example\", Histoire & Mesure 2: 5–32. doi:10.3406/hism.1987.1300 Rihll, T., Wilson, . (1991), \"Modelling settlement structures ancient Greece: new approaches polis\", City Country Ancient World, Vol. 3, Edited J. Rich . Wallace-Hadrill, 58–95. London: Routledge.","code":""},{"path":[]},{"path":"https://fabrice-rossi.github.io/blvim/reference/terminals.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute terminals for a spatial interaction model — terminals","text":"","code":"positions <- matrix(rnorm(10 * 2), ncol = 2) distances <- as.matrix(dist(positions)) production <- rep(1, 10) attractiveness <- rep(1, 10) model <- blvim(distances, production, 1.3, 2, attractiveness, bipartite = FALSE) terminals(model) #> 5 6 9  #> 5 6 9"}]
