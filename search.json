[{"path":"https://fabrice-rossi.github.io/blvim/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://fabrice-rossi.github.io/blvim/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://fabrice-rossi.github.io/blvim/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://fabrice-rossi.github.io/blvim/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://fabrice-rossi.github.io/blvim/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://fabrice-rossi.github.io/blvim/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://fabrice-rossi.github.io/blvim/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://fabrice-rossi.github.io/blvim/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://fabrice-rossi.github.io/blvim/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://fabrice-rossi.github.io/blvim/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://fabrice-rossi.github.io/blvim/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://fabrice-rossi.github.io/blvim/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://fabrice-rossi.github.io/blvim/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://fabrice-rossi.github.io/blvim/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://fabrice-rossi.github.io/blvim/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://fabrice-rossi.github.io/blvim/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://fabrice-rossi.github.io/blvim/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://fabrice-rossi.github.io/blvim/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://fabrice-rossi.github.io/blvim/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://fabrice-rossi.github.io/blvim/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://fabrice-rossi.github.io/blvim/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://fabrice-rossi.github.io/blvim/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Fabrice Rossi. Author, maintainer.","code":""},{"path":"https://fabrice-rossi.github.io/blvim/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Rossi F (2025). blvim: Boltzmann–Lotka–Volterra Interaction Model. R package version 0.0.0.9000, https://fabrice-rossi.github.io/blvim/.","code":"@Manual{,   title = {blvim: Boltzmann–Lotka–Volterra Interaction Model},   author = {Fabrice Rossi},   year = {2025},   note = {R package version 0.0.0.9000},   url = {https://fabrice-rossi.github.io/blvim/}, }"},{"path":"https://fabrice-rossi.github.io/blvim/index.html","id":"boltzmannlotkavolterra-interaction-model","dir":"","previous_headings":"","what":"Boltzmann–Lotka–Volterra Interaction Model","title":"Boltzmann–Lotka–Volterra Interaction Model","text":"blvim implements . Wilson’s Boltzmann–Lotka–Volterra (BLV) interaction model. model described Wilson, . (2008), “Boltzmann, Lotka Volterra spatial structural evolution: integrated methodology dynamical systems”, J. R. Soc. Interface.5865–871","code":""},{"path":"https://fabrice-rossi.github.io/blvim/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Boltzmann–Lotka–Volterra Interaction Model","text":"can install development version blvim GitHub :","code":"# install.packages(\"pak\") pak::pak(\"fabrice-rossi/blvim\")"},{"path":"https://fabrice-rossi.github.io/blvim/reference/as.data.frame.sim_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a collection of spatial interaction model into a Data Frame — as.data.frame.sim_list","title":"Convert a collection of spatial interaction model into a Data Frame — as.data.frame.sim_list","text":"function build data frame collection spatial interaction model.","code":""},{"path":"https://fabrice-rossi.github.io/blvim/reference/as.data.frame.sim_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a collection of spatial interaction model into a Data Frame — as.data.frame.sim_list","text":"","code":"# S3 method for class 'sim_list' as.data.frame(x, ..., models = TRUE)"},{"path":"https://fabrice-rossi.github.io/blvim/reference/as.data.frame.sim_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a collection of spatial interaction model into a Data Frame — as.data.frame.sim_list","text":"x collection spatial interaction models, object class sim_list ... additional parameters (used currently) models whether include models data frame (defaults TRUE, model inclusion)","code":""},{"path":"https://fabrice-rossi.github.io/blvim/reference/as.data.frame.sim_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert a collection of spatial interaction model into a Data Frame — as.data.frame.sim_list","text":"data frame representation spatial interaction model collection","code":""},{"path":"https://fabrice-rossi.github.io/blvim/reference/as.data.frame.sim_list.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert a collection of spatial interaction model into a Data Frame — as.data.frame.sim_list","text":"data frame one row per spatial interaction model following columns: alpha: return scale parameter used build model beta: cost inverse scale parameter used build model diversity: model diversity terminals: origin destination locations identical, terminals model model: models=TRUE, model","code":""},{"path":"https://fabrice-rossi.github.io/blvim/reference/as.data.frame.sim_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert a collection of spatial interaction model into a Data Frame — as.data.frame.sim_list","text":"","code":"positions <- matrix(rnorm(10 * 2), ncol = 2) distances <- as.matrix(dist(positions)) production <- rep(1, 10) attractiveness <- c(2, rep(1, 9)) all_flows <- grid_blvim(distances, production, c(1.25, 1.5), c(1, 2, 3), attractiveness) as.data.frame(all_flows, models = FALSE) #>   alpha beta diversity    terminals #> 1  1.25    1  1.000000            8 #> 2  1.50    1  1.000000            1 #> 3  1.25    2  5.033008 1, 2, 3,.... #> 4  1.50    2  4.167998 1, 2, 3,.... #> 5  1.25    3  7.183686 1, 2, 3,.... #> 6  1.50    3  5.066278 1, 2, 3,...."},{"path":"https://fabrice-rossi.github.io/blvim/reference/attractiveness.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract the attractivenesses from a spatial interaction model object — attractiveness","title":"Extract the attractivenesses from a spatial interaction model object — attractiveness","text":"Extract attractivenesses spatial interaction model object","code":""},{"path":"https://fabrice-rossi.github.io/blvim/reference/attractiveness.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract the attractivenesses from a spatial interaction model object — attractiveness","text":"","code":"attractiveness(sim, ...)"},{"path":"https://fabrice-rossi.github.io/blvim/reference/attractiveness.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract the attractivenesses from a spatial interaction model object — attractiveness","text":"sim spatial interaction model object ... additional parameters","code":""},{"path":"https://fabrice-rossi.github.io/blvim/reference/attractiveness.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract the attractivenesses from a spatial interaction model object — attractiveness","text":"vector attractivenesses destination locations","code":""},{"path":"https://fabrice-rossi.github.io/blvim/reference/attractiveness.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract the attractivenesses from a spatial interaction model object — attractiveness","text":"","code":"positions <- matrix(rnorm(10 * 2), ncol = 2) distances <- as.matrix(dist(positions)) production <- rep(1, 10) attractiveness <- c(2, rep(1, 9)) model <- static_blvim(distances, production, 1.5, 1, attractiveness) attractiveness(model) #>  [1] 2 1 1 1 1 1 1 1 1 1"},{"path":"https://fabrice-rossi.github.io/blvim/reference/autoplot.sim_list.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a complete ggplot for a collection of spatial interaction models — autoplot.sim_list","title":"Create a complete ggplot for a collection of spatial interaction models — autoplot.sim_list","text":"function uses tile plot ggplot2 display single numerical value parameter pairs used produce collection spatial interaction models.","code":""},{"path":"https://fabrice-rossi.github.io/blvim/reference/autoplot.sim_list.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a complete ggplot for a collection of spatial interaction models — autoplot.sim_list","text":"","code":"# S3 method for class 'sim_list' autoplot(   object,   statistics = c(\"shannon\", \"renyi\", \"terminals\", \"iterations\"),   inverse = TRUE,   order = 1,   definition = c(\"ND\", \"RW\"),   ... )"},{"path":"https://fabrice-rossi.github.io/blvim/reference/autoplot.sim_list.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a complete ggplot for a collection of spatial interaction models — autoplot.sim_list","text":"object collection spatial interaction models, object class sim_list statistics value display, defaulting \"shannon\", see details inverse whether use cost scale parameter (default) order order Rényi entropy, used definition=\"renyi\" definition diversity definition either \"shannon\" (default) \"renyi\" (see details) ... additional parameters (used currently)","code":""},{"path":"https://fabrice-rossi.github.io/blvim/reference/autoplot.sim_list.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a complete ggplot for a collection of spatial interaction models — autoplot.sim_list","text":"ggplot object","code":""},{"path":"https://fabrice-rossi.github.io/blvim/reference/autoplot.sim_list.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a complete ggplot for a collection of spatial interaction models — autoplot.sim_list","text":"value display selected statistics parameter defaults Shannon diversity \"shannon\" (see diversity()). Othervalues include: \"renyi\" (coupled order parameter) Rényi diversity (see diversity()) \"terminals\" (coupled definition parameter) number terminals origin destination locations identical (see terminals()) \"iterations\" number iterations [blvim()] model took converge horizontal axis used default cost scale parameter, \\(1/\\beta\\). general easier read using inverse cost scale. inverse parameter can used turn feature. vertical axis used default return scale parameter.","code":""},{"path":[]},{"path":"https://fabrice-rossi.github.io/blvim/reference/autoplot.sim_list.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a complete ggplot for a collection of spatial interaction models — autoplot.sim_list","text":"","code":"positions <- matrix(rnorm(10 * 2), ncol = 2) distances <- as.matrix(dist(positions)) production <- rep(1, 10) attractiveness <- c(2, rep(1, 9)) all_flows <- grid_blvim(   distances,   production,   c(1.25, 1.5, 1.75),   1 / c(0.25, 0.5, 1),   attractiveness ) ggplot2::autoplot(all_flows)"},{"path":"https://fabrice-rossi.github.io/blvim/reference/blvim.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute an equilibrium solution of the Boltzmann–Lotka–Volterra model — blvim","title":"Compute an equilibrium solution of the Boltzmann–Lotka–Volterra model — blvim","text":"function computes flows origin locations destination locations equilibrium solution . Wilson's Boltzmann–Lotka–Volterra (BLV) interaction model. BLV dynamic model initialised production constraints origin locations initial values attractiveness destination locations. Iterations update attractivenesses according received flows.","code":""},{"path":"https://fabrice-rossi.github.io/blvim/reference/blvim.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute an equilibrium solution of the Boltzmann–Lotka–Volterra model — blvim","text":"","code":"blvim(   costs,   X,   alpha,   beta,   Z,   epsilon = 0.01,   iter_max = 50000,   conv_check = 100,   precision = 1e-06,   quadratic = FALSE )"},{"path":"https://fabrice-rossi.github.io/blvim/reference/blvim.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute an equilibrium solution of the Boltzmann–Lotka–Volterra model — blvim","text":"costs cost matrix X vector production constraints alpha return scale parameter beta inverse cost scale parameter Z vector initial destination attractivenesses epsilon update intensity iter_max maximal number steps BLV dynamic conv_check number iterations convergence test precision convergence threshold quadratic selects update rule, see details.","code":""},{"path":"https://fabrice-rossi.github.io/blvim/reference/blvim.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute an equilibrium solution of the Boltzmann–Lotka–Volterra model — blvim","text":"object class sim(sim_blvim) spatial interaction model contains matrix flows origin destination locations well final attractivenesses computed model.","code":""},{"path":"https://fabrice-rossi.github.io/blvim/reference/blvim.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute an equilibrium solution of the Boltzmann–Lotka–Volterra model — blvim","text":"step BLV model, flows computed according production constrained entropy maximising model proposed . Wilson implemented static_blvim(). flows received destination computed follows $$\\forall j,\\quad D_j=\\sum_{=1}^{n}Y_{ij},$$ destination \\(j\\). enables updating attractivenesses making closer received flows, .e. trying reduce \\(|D_j-Z_j|\\). . Wilson co-authors proposed two different update strategies: original model proposed Harris & Wilson (1978) updates \\(Z_j\\) follows $$Z_j^{t+1} = Z_j^{t} + \\epsilon (D^{t}_j-Z^{t}_j)$$ Wilson (2008), update given $$Z_j^{t+1} = Z_j^{t} + \\epsilon (D^{t}_j-Z^{t}_j)Z^{t}_j$$ cases, \\(\\epsilon\\) given epsilon parameter. smaller 1. first update used quadratic parameter FALSE default value. second update used quadratic TRUE. Updates performed convergence maximum iter_max iterations. Convergence checked every conv_check iterations. algorithm considered converged $$\\|Z^{t+1}-Z^t\\|<\\delta (\\|Z^{t+1}\\|+\\delta),$$ \\(\\delta\\) given precision parameter.","code":""},{"path":"https://fabrice-rossi.github.io/blvim/reference/blvim.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Compute an equilibrium solution of the Boltzmann–Lotka–Volterra model — blvim","text":"Harris, B., & Wilson, . G. (1978). \"Equilibrium Values Dynamics Attractiveness Terms Production-Constrained Spatial-Interaction Models\", Environment Planning : Economy Space, 10(4), 371-388. doi:10.1068/a100371 Wilson, . (2008), \"Boltzmann, Lotka Volterra spatial structural evolution: integrated methodology dynamical systems\", J. R. Soc. Interface.5865–871 doi:10.1098/rsif.2007.1288","code":""},{"path":"https://fabrice-rossi.github.io/blvim/reference/blvim.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute an equilibrium solution of the Boltzmann–Lotka–Volterra model — blvim","text":"","code":"positions <- matrix(rnorm(10 * 2), ncol = 2) distances <- as.matrix(dist(positions)) production <- rep(1, 10) attractiveness <- c(2, rep(1, 9)) flows <- blvim(distances, production, 1.5, 1, attractiveness)"},{"path":"https://fabrice-rossi.github.io/blvim/reference/costs.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract the inverse cost matrix used to compute this model — costs","title":"Extract the inverse cost matrix used to compute this model — costs","text":"Extract inverse cost matrix used compute model","code":""},{"path":"https://fabrice-rossi.github.io/blvim/reference/costs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract the inverse cost matrix used to compute this model — costs","text":"","code":"costs(sim, ...)"},{"path":"https://fabrice-rossi.github.io/blvim/reference/costs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract the inverse cost matrix used to compute this model — costs","text":"sim spatial interaction model cost matrix ... additional parameters","code":""},{"path":"https://fabrice-rossi.github.io/blvim/reference/costs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract the inverse cost matrix used to compute this model — costs","text":"cost matrix","code":""},{"path":"https://fabrice-rossi.github.io/blvim/reference/costs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract the inverse cost matrix used to compute this model — costs","text":"","code":"positions <- matrix(rnorm(10 * 2), ncol = 2) distances <- as.matrix(dist(positions)) production <- rep(1, 10) attractiveness <- c(2, rep(1, 9)) model <- static_blvim(distances, production, 1.5, 1, attractiveness) costs(model) ## should be equal to distances above #>            1         2         3         4         5         6        7 #> 1  0.0000000 0.8944416 1.3311477 1.4441129 2.4733768 1.4904776 4.602997 #> 2  0.8944416 0.0000000 0.5497898 1.3279556 1.9346812 0.6380619 4.159686 #> 3  1.3311477 0.5497898 0.0000000 1.1037436 1.4137938 0.7214199 3.642222 #> 4  1.4441129 1.3279556 1.1037436 0.0000000 1.2225872 1.7985360 3.184303 #> 5  2.4733768 1.9346812 1.4137938 1.2225872 0.0000000 2.0395902 2.228648 #> 6  1.4904776 0.6380619 0.7214199 1.7985360 2.0395902 0.0000000 4.239041 #> 7  4.6029971 4.1596861 3.6422220 3.1843026 2.2286479 4.2390415 0.000000 #> 8  2.1445759 1.4587663 0.9102592 1.2148954 0.6048877 1.4598588 2.779735 #> 9  1.7373128 0.9009669 0.4135794 1.3604407 1.2863273 0.7646075 3.474529 #> 10 2.4163167 2.1615860 1.7574277 0.9731468 0.8002601 2.4711402 2.231130 #>            8         9        10 #> 1  2.1445759 1.7373128 2.4163167 #> 2  1.4587663 0.9009669 2.1615860 #> 3  0.9102592 0.4135794 1.7574277 #> 4  1.2148954 1.3604407 0.9731468 #> 5  0.6048877 1.2863273 0.8002601 #> 6  1.4598588 0.7646075 2.4711402 #> 7  2.7797350 3.4745286 2.2311300 #> 8  0.0000000 0.6963211 1.2634126 #> 9  0.6963211 0.0000000 1.8080017 #> 10 1.2634126 1.8080017 0.0000000"},{"path":"https://fabrice-rossi.github.io/blvim/reference/destination_flow.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the flows incoming at each destination location — destination_flow","title":"Compute the flows incoming at each destination location — destination_flow","text":"Compute flows incoming destination location","code":""},{"path":"https://fabrice-rossi.github.io/blvim/reference/destination_flow.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the flows incoming at each destination location — destination_flow","text":"","code":"destination_flow(sim, ...)"},{"path":"https://fabrice-rossi.github.io/blvim/reference/destination_flow.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the flows incoming at each destination location — destination_flow","text":"sim spatial interaction model object ... additional parameters","code":""},{"path":"https://fabrice-rossi.github.io/blvim/reference/destination_flow.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the flows incoming at each destination location — destination_flow","text":"vector flows incoming destination locations","code":""},{"path":"https://fabrice-rossi.github.io/blvim/reference/destination_flow.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute the flows incoming at each destination location — destination_flow","text":"","code":"positions <- matrix(rnorm(10 * 2), ncol = 2) distances <- as.matrix(dist(positions)) production <- rep(1, 10) attractiveness <- c(2, rep(1, 9)) model <- static_blvim(distances, production, 1.5, 1, attractiveness) destination_flow(model) #>  [1] 2.6421903 0.8016084 0.9320202 0.9134716 0.7497341 0.7178542 0.9504198 #>  [8] 0.7431234 0.8429707 0.7066071"},{"path":"https://fabrice-rossi.github.io/blvim/reference/diversity.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the diversity of the destination flows in a spatial interaction model — diversity","title":"Compute the diversity of the destination flows in a spatial interaction model — diversity","text":"function computes diversity destination flows according different definitions aim estimating number active destinations, .e., number destination locations receive \"significant fraction\" total flow. function applies also collection spatial interaction models represented sim_list.","code":""},{"path":"https://fabrice-rossi.github.io/blvim/reference/diversity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the diversity of the destination flows in a spatial interaction model — diversity","text":"","code":"diversity(sim, definition = c(\"shannon\", \"renyi\"), order = 1L, ...)  # S3 method for class 'sim' diversity(sim, definition = c(\"shannon\", \"renyi\"), order = 1L, ...)  # S3 method for class 'sim_list' diversity(sim, definition = c(\"shannon\", \"renyi\"), order = 1L, ...)"},{"path":"https://fabrice-rossi.github.io/blvim/reference/diversity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the diversity of the destination flows in a spatial interaction model — diversity","text":"sim spatial interaction model object (object class sim) collection spatial interaction  models (object class sim_list) definition diversity definition either \"shannon\" (default) \"renyi\" (see details) order order Rényi entropy, used definition=\"renyi\" ... additional parameters","code":""},{"path":"https://fabrice-rossi.github.io/blvim/reference/diversity.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the diversity of the destination flows in a spatial interaction model — diversity","text":"diversity destination flows (one value per spatial interaction model)","code":""},{"path":"https://fabrice-rossi.github.io/blvim/reference/diversity.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute the diversity of the destination flows in a spatial interaction model — diversity","text":"\\(Y\\) flow matrix, destination flows computed follows $$\\forall j,\\quad D_j=\\sum_{=1}^{n}Y_{ij},$$ destination \\(j\\) (see destination_flow()). compute diversity, first normalised interpreted probability distribution destination locations. use $$\\forall j,\\quad p_j=\\frac{D_j}{\\sum_{k=1}^n D_k}.$$ classic diversity index given exponential Shannon's entropy (parameter definition=\"shannon\"). gives $$\\text{diversity}(p, \\text{Shannon})=\\exp\\left(-\\sum_{k=1}^n p_k\\ln p_k\\right).$$ Rényi generalized entropy can used define collection diversity metrics. Rényi diversity order \\(\\gamma\\) exponential Rényi entropy order \\(\\gamma\\) \\(p\\) distribution, $$\\text{diversity}(p, \\text{Rényi}, \\gamma)=\\exp\\left(\\frac{1}{1-\\gamma}\\ln \\left(\\sum_{k=1}^np_k^\\gamma\\right)\\right).$$ defined directly \\(\\gamma\\]0,1[\\cup ]1,\\infty[\\), extensions limit case straightforward: \\(\\gamma=1\\) Shannon's entropy/diversity \\(\\gamma=0\\) max-entropy, \\(\\ln(n)\\) thus corresponding diversity number locations \\(\\gamma=\\infty\\) min-entropy, \\(-\\log \\max_{k}p_k\\) thhe corresponding diversity \\(\\frac{1}{\\max_{k}p_k}\\) definition parameter specifies diversity used calculation. default value shannon Shannon's entropy (case order parameter used). Using renyi gives access Rényi diversities specified order parameter. Large values order tend generate underflows calculation trigger use min-entropy instead exact Rényi entropy. applied collection spatial interaction  models (object class sim_list) function uses parameters (definition order) models returns vector diversities.","code":""},{"path":"https://fabrice-rossi.github.io/blvim/reference/diversity.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Compute the diversity of the destination flows in a spatial interaction model — diversity","text":"Jost, L. (2006), \"Entropy diversity\", Oikos, 113: 363-375. doi:10.1111/j.2006.0030-1299.14714.x","code":""},{"path":[]},{"path":"https://fabrice-rossi.github.io/blvim/reference/diversity.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute the diversity of the destination flows in a spatial interaction model — diversity","text":"","code":"positions <- matrix(rnorm(10 * 2), ncol = 2) distances <- as.matrix(dist(positions)) production <- rep(1, 10) attractiveness <- c(2, rep(1, 9)) flows <- blvim(distances, production, 1.5, 3, attractiveness) diversity(flows) #> [1] 3.185575 diversity(flows, \"renyi\", 2) #> [1] 2.78738"},{"path":"https://fabrice-rossi.github.io/blvim/reference/flows.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract the flow matrix from a spatial interaction model object — flows","title":"Extract the flow matrix from a spatial interaction model object — flows","text":"Extract flow matrix spatial interaction model object","code":""},{"path":"https://fabrice-rossi.github.io/blvim/reference/flows.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract the flow matrix from a spatial interaction model object — flows","text":"","code":"flows(sim, ...)"},{"path":"https://fabrice-rossi.github.io/blvim/reference/flows.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract the flow matrix from a spatial interaction model object — flows","text":"sim spatial interaction model object ... additional parameters","code":""},{"path":"https://fabrice-rossi.github.io/blvim/reference/flows.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract the flow matrix from a spatial interaction model object — flows","text":"matrix flows origin locations destination locations","code":""},{"path":"https://fabrice-rossi.github.io/blvim/reference/flows.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract the flow matrix from a spatial interaction model object — flows","text":"","code":"positions <- matrix(rnorm(10 * 2), ncol = 2) distances <- as.matrix(dist(positions)) production <- rep(1, 10) attractiveness <- c(2, rep(1, 9)) model <- static_blvim(distances, production, 1.5, 1, attractiveness) flows(model) #>             [,1]       [,2]        [,3]       [,4]       [,5]       [,6] #>  [1,] 0.53645833 0.09120760 0.014489861 0.04889293 0.05160628 0.04210426 #>  [2,] 0.31792222 0.23374151 0.011836388 0.04132279 0.03061538 0.02539296 #>  [3,] 0.09806064 0.02298052 0.453812545 0.12970074 0.04255356 0.06797498 #>  [4,] 0.19237920 0.04664573 0.075409153 0.26385061 0.05197370 0.06807639 #>  [5,] 0.20551320 0.03497736 0.025040475 0.05260277 0.26704419 0.16079134 #>  [6,] 0.15949864 0.02759653 0.038049550 0.06554134 0.15295247 0.25402529 #>  [7,] 0.26611643 0.19515379 0.010580139 0.03658636 0.02569238 0.02120276 #>  [8,] 0.24046441 0.05770674 0.049887630 0.17371653 0.05439411 0.06460128 #>  [9,] 0.24243768 0.13344646 0.007032699 0.02457968 0.02820515 0.02029341 #> [10,] 0.13899369 0.02391383 0.038805069 0.05844078 0.15220684 0.21812349 #>             [,7]       [,8]        [,9]      [,10] #>  [1,] 0.06746273 0.06722738 0.047141922 0.03340870 #>  [2,] 0.17244837 0.05623566 0.090449064 0.02003565 #>  [3,] 0.01815157 0.09438842 0.009254643 0.06312239 #>  [4,] 0.03649418 0.19109468 0.018805961 0.05527040 #>  [5,] 0.02593783 0.06055979 0.021841008 0.14569203 #>  [6,] 0.02036177 0.06841754 0.014948343 0.19860853 #>  [7,] 0.26451710 0.04923312 0.114189882 0.01672804 #>  [8,] 0.04464309 0.23985604 0.023516767 0.05121340 #>  [9,] 0.14887189 0.03381161 0.344856840 0.01646458 #> [10,] 0.01764302 0.05956820 0.013319668 0.27898542"},{"path":"https://fabrice-rossi.github.io/blvim/reference/grid_blvim.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute a collection of Boltzmann–Lotka–Volterra model solutions — grid_blvim","title":"Compute a collection of Boltzmann–Lotka–Volterra model solutions — grid_blvim","text":"function computes collection flows origin locations destination locations using blvim() grid parameters. flows use costs, production constraints attractivenesses. flow computed using one pairwise combinations alpha values given alphas beta values given betas. function returns object class sim_list contains resulting flows.","code":""},{"path":"https://fabrice-rossi.github.io/blvim/reference/grid_blvim.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute a collection of Boltzmann–Lotka–Volterra model solutions — grid_blvim","text":"","code":"grid_blvim(   costs,   X,   alphas,   betas,   Z,   epsilon = 0.01,   iter_max = 50000,   conv_check = 100,   precision = 1e-06,   quadratic = FALSE,   progress = FALSE )"},{"path":"https://fabrice-rossi.github.io/blvim/reference/grid_blvim.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute a collection of Boltzmann–Lotka–Volterra model solutions — grid_blvim","text":"costs cost matrix X vector production constraints alphas vector return scale parameters betas vector cost inverse scale parameters Z vector initial destination attractivenesses epsilon update intensity iter_max maximal number steps BLV dynamic conv_check number iterations convergence test precision convergence threshold quadratic selects update rule, see details. progress TRUE, progress bar shown calculation (defaults FALSE)","code":""},{"path":"https://fabrice-rossi.github.io/blvim/reference/grid_blvim.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute a collection of Boltzmann–Lotka–Volterra model solutions — grid_blvim","text":"object class sim_list","code":""},{"path":"https://fabrice-rossi.github.io/blvim/reference/grid_blvim.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute a collection of Boltzmann–Lotka–Volterra model solutions — grid_blvim","text":"","code":"positions <- matrix(rnorm(10 * 2), ncol = 2) distances <- as.matrix(dist(positions)) production <- rep(1, 10) attractiveness <- c(2, rep(1, 9)) all_flows <- grid_blvim(distances, production, c(1.25, 1.5), c(1, 2, 3), attractiveness) all_flows #> Collection of 6 spatial interaction models with 10 origin locations and 10 #> destination locations computed on the following grid: #> • alpha: 1.25 and 1.5 #> • beta: 1, 2, and 3 length(all_flows) #> [1] 6 all_flows[[2]] #> Spatial interaction model with 10 origin locations and 10 destination locations #> • Model: Wilson's production constrained #> • Parameters: return to scale (alpha) = 1.5 and inverse cost scale (beta) = 1 #> ℹ The BLV model converged after 2600 iterations."},{"path":"https://fabrice-rossi.github.io/blvim/reference/inverse_cost.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract the inverse cost scale parameter used to compute this model — inverse_cost","title":"Extract the inverse cost scale parameter used to compute this model — inverse_cost","text":"Extract inverse cost scale parameter used compute model","code":""},{"path":"https://fabrice-rossi.github.io/blvim/reference/inverse_cost.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract the inverse cost scale parameter used to compute this model — inverse_cost","text":"","code":"inverse_cost(sim, ...)"},{"path":"https://fabrice-rossi.github.io/blvim/reference/inverse_cost.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract the inverse cost scale parameter used to compute this model — inverse_cost","text":"sim spatial interaction model inverse cost scale parameter ... additional parameters","code":""},{"path":"https://fabrice-rossi.github.io/blvim/reference/inverse_cost.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract the inverse cost scale parameter used to compute this model — inverse_cost","text":"inverse cost scale parameter","code":""},{"path":"https://fabrice-rossi.github.io/blvim/reference/inverse_cost.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract the inverse cost scale parameter used to compute this model — inverse_cost","text":"","code":"positions <- matrix(rnorm(10 * 2), ncol = 2) distances <- as.matrix(dist(positions)) production <- rep(1, 10) attractiveness <- c(2, rep(1, 9)) model <- static_blvim(distances, production, 1.5, 1, attractiveness) inverse_cost(model) ## should be 1 #> [1] 1"},{"path":"https://fabrice-rossi.github.io/blvim/reference/production.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract the production constraints from a spatial interaction model object — production","title":"Extract the production constraints from a spatial interaction model object — production","text":"Extract production constraints spatial interaction model object","code":""},{"path":"https://fabrice-rossi.github.io/blvim/reference/production.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract the production constraints from a spatial interaction model object — production","text":"","code":"production(sim, ...)"},{"path":"https://fabrice-rossi.github.io/blvim/reference/production.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract the production constraints from a spatial interaction model object — production","text":"sim spatial interaction model object ... additional parameters","code":""},{"path":"https://fabrice-rossi.github.io/blvim/reference/production.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract the production constraints from a spatial interaction model object — production","text":"vector production constraints origin locations","code":""},{"path":"https://fabrice-rossi.github.io/blvim/reference/production.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract the production constraints from a spatial interaction model object — production","text":"","code":"positions <- matrix(rnorm(10 * 2), ncol = 2) distances <- as.matrix(dist(positions)) production <- rep(1, 10) attractiveness <- c(2, rep(1, 9)) model <- static_blvim(distances, production, 1.5, 1, attractiveness) all.equal(production(model), production) #> [1] TRUE"},{"path":"https://fabrice-rossi.github.io/blvim/reference/return_to_scale.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract the return to scale parameter used to compute this model — return_to_scale","title":"Extract the return to scale parameter used to compute this model — return_to_scale","text":"Extract return scale parameter used compute model","code":""},{"path":"https://fabrice-rossi.github.io/blvim/reference/return_to_scale.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract the return to scale parameter used to compute this model — return_to_scale","text":"","code":"return_to_scale(sim, ...)"},{"path":"https://fabrice-rossi.github.io/blvim/reference/return_to_scale.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract the return to scale parameter used to compute this model — return_to_scale","text":"sim spatial interaction model return scale parameter ... additional parameters","code":""},{"path":"https://fabrice-rossi.github.io/blvim/reference/return_to_scale.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract the return to scale parameter used to compute this model — return_to_scale","text":"return scale parameter","code":""},{"path":"https://fabrice-rossi.github.io/blvim/reference/return_to_scale.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract the return to scale parameter used to compute this model — return_to_scale","text":"","code":"positions <- matrix(rnorm(10 * 2), ncol = 2) distances <- as.matrix(dist(positions)) production <- rep(1, 10) attractiveness <- c(2, rep(1, 9)) model <- static_blvim(distances, production, 1.5, 1, attractiveness) return_to_scale(model) ## should be 1.5 #> [1] 1.5"},{"path":"https://fabrice-rossi.github.io/blvim/reference/static_blvim.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute flows between origin and destination locations — static_blvim","title":"Compute flows between origin and destination locations — static_blvim","text":"function computes flows origin locations destination locations according production constrained entropy maximising model proposed . Wilson.","code":""},{"path":"https://fabrice-rossi.github.io/blvim/reference/static_blvim.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute flows between origin and destination locations — static_blvim","text":"","code":"static_blvim(costs, X, alpha, beta, Z)"},{"path":"https://fabrice-rossi.github.io/blvim/reference/static_blvim.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute flows between origin and destination locations — static_blvim","text":"costs cost matrix X vector production constraints alpha return scale parameter beta inverse cost scale parameter Z vector destination attractivenesses","code":""},{"path":"https://fabrice-rossi.github.io/blvim/reference/static_blvim.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute flows between origin and destination locations — static_blvim","text":"object class sim (sim_wpc) spatial interaction model contains matrix flows origin locations destination locations (see \\((Y_{ij})_{1\\leq \\leq n, 1\\leq j\\leq p}\\) ) attractivenesses destination locations.","code":""},{"path":"https://fabrice-rossi.github.io/blvim/reference/static_blvim.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute flows between origin and destination locations — static_blvim","text":"model computes flows using following parameters: costs (\\(c\\)) \\(n\\times p\\) matrix whose \\((,j )\\) entry cost \"unitary\" flow origin location \\(\\) destination location \\(j\\) X (\\(X\\)) vector size \\(n\\) containing non negative production constraints \\(n\\) origin locations alpha (\\(\\alpha\\)) return scale parameter enhance (reduce smaller 1) attractivenesses destination locations larger 1 beta (\\(\\beta\\)) inverse cost scale parameter, .e., costs multiplied beta model Z (\\(Z\\)) vector size \\(p\\) containing positive attractivenesses \\(p\\) destination locations According Wilson's model, flow origin location \\(\\) destination location \\(j\\), \\(Y_{ij}\\), given $$Y_{ij}=\\frac{X_iZ_j^{\\alpha}\\exp(-\\beta c_{ij})}{\\sum_{k=1}^pZ_k^{\\alpha}\\exp(-\\beta c_{ik})}.$$ model production constrained $$\\forall ,\\quad X_i=\\sum_{j=1}^{p}Y_{ij},$$ origin location \\(\\) sends total flow exactly \\(X_i\\).","code":""},{"path":"https://fabrice-rossi.github.io/blvim/reference/static_blvim.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Compute flows between origin and destination locations — static_blvim","text":"Wilson, . (1971), \"family spatial interaction models, associated developments\", Environment Planning : Economy Space, 3(1), 1-32 doi:10.1068/a030001","code":""},{"path":"https://fabrice-rossi.github.io/blvim/reference/static_blvim.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute flows between origin and destination locations — static_blvim","text":"","code":"positions <- matrix(rnorm(10 * 2), ncol = 2) distances <- as.matrix(dist(positions)) production <- rep(1, 10) attractiveness <- c(2, rep(1, 9)) model <- static_blvim(distances, production, 1.5, 1, attractiveness)"},{"path":"https://fabrice-rossi.github.io/blvim/reference/terminals.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute terminals for a spatial interaction model — terminals","title":"Compute terminals for a spatial interaction model — terminals","text":"function identifies terminals locations underlying given spatial interaction model. Terminals locally dominating locations essentially send less locations receive (see details formal definitions). compare incoming flows outgoing flows, terminal computation restricted interaction models origin destination locations identical.","code":""},{"path":"https://fabrice-rossi.github.io/blvim/reference/terminals.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute terminals for a spatial interaction model — terminals","text":"","code":"terminals(sim, definition = c(\"ND\", \"RW\"), ...)"},{"path":"https://fabrice-rossi.github.io/blvim/reference/terminals.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute terminals for a spatial interaction model — terminals","text":"sim spatial interaction model object definition terminal definition, either \"ND\" (Nystuen & Dacey, default) \"RW\" (Rihll & Wilson), see details. ... additional parameters","code":""},{"path":"https://fabrice-rossi.github.io/blvim/reference/terminals.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute terminals for a spatial interaction model — terminals","text":"vector containing indexes terminals identified flow matrix interaction model.","code":""},{"path":"https://fabrice-rossi.github.io/blvim/reference/terminals.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compute terminals for a spatial interaction model — terminals","text":"notion terminal used function based seminal work J. D. Nystuen M. F. Dacey (Nystuen & Dacey, 1961), well follow variation Rihll & Wislon (1987 1991). assume given square flow matrix \\((Y_{ij})_{1\\leq \\leq n, 1\\leq j\\leq n}\\). incoming flow location \\(j\\) given $$D_j=\\sum_{j=}^{p}Y_{ij},$$ used measure importance location. Nystuen & Dacey (1961), location \\(j\\) \"terminal point\" (\"central city\") $$D_j \\geq D_{m(j)},$$ \\(m(j)\\) $$\\forall l,\\quad Y_{jl}\\leq Y_{jm(j)}.$$ words, \\(j\\) terminal location \\(m(j)\\) sends largest flow less important \\(j\\) , terms incoming flows. definition used function definition \"ND\". Rihll & Wilson (1987) use modified version definition described details Rihll Wilson (1991). relaxed version, location \\(j\\) terminal $$\\forall ,\\quad D_j \\geq Y_{ij}.$$ words, \\(j\\) terminal receives flows sending location. easy see Nystuen & Dacey terminal Rihll & Wilson terminal, reverse false general. function use Rihll & Wilson definition definition \"RW\"","code":""},{"path":"https://fabrice-rossi.github.io/blvim/reference/terminals.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Compute terminals for a spatial interaction model — terminals","text":"Nystuen, J.D. Dacey, M.F. (1961), \"graph theory interpretation nodal regions\", Papers Proceedings Regional Science Association 7: 29–42. doi:10.1007/bf01969070 Rihll, T.E., Wilson, .G. (1987). \"Spatial interaction structural models historical analysis: possibilities example\", Histoire & Mesure 2: 5–32. doi:10.3406/hism.1987.1300 Rihll, T., Wilson, . (1991), \"Modelling settlement structures ancient Greece: new approaches polis\", City Country Ancient World, Vol. 3, Edited J. Rich . Wallace-Hadrill, 58–95. London: Routledge.","code":""},{"path":"https://fabrice-rossi.github.io/blvim/reference/terminals.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute terminals for a spatial interaction model — terminals","text":"","code":"positions <- matrix(rnorm(10 * 2), ncol = 2) distances <- as.matrix(dist(positions)) production <- rep(1, 10) attractiveness <- rep(1, 10) model <- blvim(distances, production, 1.3, 2, attractiveness) terminals(model) #> [1] 2 4 6 7"}]
